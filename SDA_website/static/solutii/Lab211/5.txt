<pre id="0" onclick="afisare(0)"><br><br>Problem1<br><br>    Creeam cele trei structuri de date in ordine: stiva coada stiva.<br>Stiva1:|__________|<br>Coada:|__________|<br>Stiva2:|__________|<br><br>   Efectuam sirul de operatii: <br>G ̲c e ̲c o ̲c r ̲c g ̲c e ̲c m ̲c  ̲1  ̲2 a ̲c  ̲1  ̲2 s ̲c  ̲1  ̲2 i ̲c  ̲1  ̲2 n ̲c  ̲1  ̲2 a ̲c  ̲1  ̲2 d ̲c  ̲1 o ̲c  ̲1 r ̲c  ̲1 e ̲c  ̲1 s ̲c  ̲1 t ̲c  ̲1 e ̲c  ̲1 <br><br>   Obtinem: <br>Stiva1: G    e    o    r    g    e    m̶    a̶    s̶    i̶    n̶    a̶    d̶    o̶    r̶    e̶    s̶    t̶    e̶<br>Coada:  m̶    a̶    s̶    i̶    n̶    a̶    d    o    r    e    s    t    e<br>Stiva2: m    a    s    i    n    a<br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br>Operatiile folosite sunt: <br>[numar(22), numar(62), numar(73), numar(49), numar(2), numar(3), p, p, p, p, p, numar(27), p, numar(72), p, numar(89), p, numar(88), p, numar(48), p, p]<br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br> Avand elementele 2 9 3 6 11 7 10 8 1 intr-o stiva (1 este ultimul el. inserat), gasiti o succesiune de mutari a.i. sa stergeti el. 11 din stiva avand la dispozitie 2 cozi si operatiile:<br>P -> se extrage un el. din stiva, se introduce in prima coada<br>S -> se sterge un el. din stiva<br>1 -> se extrage un el. din coada 1 se introduce in coada 2<br>2 -> se extrage un el. din coada 2 se introduce in coada 1<br>I_1 -> se extrage un el din coada 1 si se introduce in stiva<br>I_2 -> se extrage un el din coada 2 si se introduce in stiva<br><br>-------- Rezolvare --------<br><br>Avem initial:<br>	Stiva		2 9 3 6 11 7 10 8 1 (varf)<br>	Coada 1		Coada este goala.<br><br>	Coada 2		Coada este goala.<br><br>____________________________________________________<br><br>Vom introduce in coada 1 toate elementele de pe stiva,ce se afla deasupra elementului de scos<br><br>Aplicam operatia P 1<br><br>	Stiva		2 9 3 6 11 7 10 8 (varf)<br>	Coada 1		1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 8<br><br>	Stiva		2 9 3 6 11 7 10 (varf)<br>	Coada 1		1 <--8 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 10<br><br>	Stiva		2 9 3 6 11 7 (varf)<br>	Coada 1		1 <--8 <--10 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 7<br><br>	Stiva		2 9 3 6 11 (varf)<br>	Coada 1		1 <--8 <--10 <--7 <--<br>	Coada 2		Coada este goala.<br><br>______________________________________<br><br>Vom scoate elementul cerut de pe stiva<br><br>Aplicam operatia S 11<br>______________________________________________________<br><br>Introducem in coada 1 toate elementele ramase pe stiva<br><br>Aplicam operatia P 6<br>	Stiva		2 9 3 (varf)<br>	Coada 1		1 <--8 <--10 <--7 <--6 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 3<br>	Stiva		2 9 (varf)<br>	Coada 1		1 <--8 <--10 <--7 <--6 <--3 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 9<br>	Stiva		2 (varf)<br>	Coada 1		1 <--8 <--10 <--7 <--6 <--3 <--9 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 2<br>	Stiva		Stiva este goala.<br><br>	Coada 1		1 <--8 <--10 <--7 <--6 <--3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br><br>______________________________________________________<br><br>Introducem toate elementele din coada 1, in ordine, pe stiva<br><br>Aplicam operatia I_1 1<br>	Stiva		1 (varf)<br>	Coada 1		8 <--10 <--7 <--6 <--3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 8<br>	Stiva		1 8 (varf)<br>	Coada 1		10 <--7 <--6 <--3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 10<br>	Stiva		1 8 10 (varf)<br>	Coada 1		7 <--6 <--3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 7<br>	Stiva		1 8 10 7 (varf)<br>	Coada 1		6 <--3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 6<br>	Stiva		1 8 10 7 6 (varf)<br>	Coada 1		3 <--9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 3<br>	Stiva		1 8 10 7 6 3 (varf)<br>	Coada 1		9 <--2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 9<br>	Stiva		1 8 10 7 6 3 9 (varf)<br>	Coada 1		2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 2<br>	Stiva		1 8 10 7 6 3 9 2 (varf)<br>	Coada 1		Coada este goala.<br><br>	Coada 2		Coada este goala.<br><br><br>_______________________________________________<br><br>Scoatem toate elementele de pe stiva, in ordinesi le introducem in coada 1<br><br>Aplicam operatia P 2<br><br>	Stiva		1 8 10 7 6 3 9 (varf)<br>	Coada 1		2 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 9<br><br>	Stiva		1 8 10 7 6 3 (varf)<br>	Coada 1		2 <--9 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 3<br><br>	Stiva		1 8 10 7 6 (varf)<br>	Coada 1		2 <--9 <--3 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 6<br><br>	Stiva		1 8 10 7 (varf)<br>	Coada 1		2 <--9 <--3 <--6 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 7<br><br>	Stiva		1 8 10 (varf)<br>	Coada 1		2 <--9 <--3 <--6 <--7 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 10<br><br>	Stiva		1 8 (varf)<br>	Coada 1		2 <--9 <--3 <--6 <--7 <--10 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 8<br><br>	Stiva		1 (varf)<br>	Coada 1		2 <--9 <--3 <--6 <--7 <--10 <--8 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia P 1<br><br>	Stiva		Stiva este goala.<br><br>	Coada 1		2 <--9 <--3 <--6 <--7 <--10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br><br>______________________________________________________<br><br>Introducem toate elementele din coada 1, in ordine, pe stiva<br><br>Aplicam operatia I_1 2<br>	Stiva		2 (varf)<br>	Coada 1		9 <--3 <--6 <--7 <--10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 9<br>	Stiva		2 9 (varf)<br>	Coada 1		3 <--6 <--7 <--10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 3<br>	Stiva		2 9 3 (varf)<br>	Coada 1		6 <--7 <--10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 6<br>	Stiva		2 9 3 6 (varf)<br>	Coada 1		7 <--10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 7<br>	Stiva		2 9 3 6 7 (varf)<br>	Coada 1		10 <--8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 10<br>	Stiva		2 9 3 6 7 10 (varf)<br>	Coada 1		8 <--1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 8<br>	Stiva		2 9 3 6 7 10 8 (varf)<br>	Coada 1		1 <--<br>	Coada 2		Coada este goala.<br><br>Aplicam operatia I_1 1<br>	Stiva		2 9 3 6 7 10 8 1 (varf)<br>	Coada 1		Coada este goala.<br><br>	Coada 2		Coada este goala.<br><br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>  <br>Introducem elementele: [5, 8, 3, 1, 2, 4, 7] intr-un arbore binar de cautare. <br>Radacina va fi: 5<br><br>Vectorul de tati este: [-1, 3, 1, 5, 3, 0, -1, 8, 5, -1]<br>Vectorul de nivel este: [-1, 2, 3, 1, 2, 0, -1, 2, 1, -1]<br><br>Verificam in vectorul de tati ce noduri pot fi sterse in 2 moduri (cele care au 2 fii).<br>Nodurile care se pot sterge in doua moduri sunt: <br>3 deoarece are 2 fii<br>5 deoarece are 2 fii<br><br>Arborele initial este:<br><br><br>          8<br>                    7<br>5<br>                    4<br>          3<br>                              2<br>                    1<br><br>Arborele final, dupa stergerea elementului 8 este:<br><br><br>          7<br>5<br>                    4<br>          3<br>                              2<br>                    1<br><br><br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem8<br>Subpuctul a)<br>INSERTION SORT: <br><br>PASUL 1:<br>[50, 93, 88, 25, 73, 84, 13]<br><br>PASUL 2:<br>[50, 88, 93, 25, 73, 84, 13]<br>[50, 88, 93, 25, 73, 84, 13]<br><br>PASUL 3:<br>[50, 88, 25, 93, 73, 84, 13]<br>[50, 25, 88, 93, 73, 84, 13]<br>[25, 50, 88, 93, 73, 84, 13]<br>[25, 50, 88, 93, 73, 84, 13]<br><br>PASUL 4:<br>[25, 50, 88, 73, 93, 84, 13]<br>[25, 50, 73, 88, 93, 84, 13]<br>[25, 50, 73, 88, 93, 84, 13]<br><br>BUBBLE SORT: <br><br>PASUL 1:<br>[13, 25, 50, 73, 84, 88, 93]<br>PASUL 2:<br>[13, 25, 50, 73, 84, 88, 93]<br>Subpunctul b)<br>SELECTIA MAXIMULUI:<br> PASUL 1:<br>[50, 93, 88, 25, 73, 84, 13]:<br> PASUL 2:<br>[50, 93, 88, 25, 73, 84, 13]:<br> PASUL 3:<br>[50, 93, 88, 25, 73, 84, 13]:<br> PASUL 4:<br>[50, 93, 88, 25, 73, 84, 13]:<br>SELECTIA MINIMULUI:<br><br> PASUL 1:<br>[13, 93, 88, 25, 73, 84, 50]<br> PASUL 2:<br>[13, 25, 88, 93, 73, 84, 50]<br>Subpunctul c)<br><br>Pivot: 84<br>[50, 13, 73, 25, 84, 88, 93]<br><br>Pivot: 13<br>[13, 50, 73, 25, 84, 88, 93]<br><br>Pivot: 73<br>[13, 50, 25, 73, 84, 88, 93]<br><br>Pivot: 25<br>[13, 25, 50, 73, 84, 88, 93]<br><br>Folosim partitionarea Hoare<br><br>Subpunctul d)<br>INSERTION SORT:<br>PASUL 1:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 2:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 3:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 4:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 5:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 6:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 7:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>SELECTION SORT: <br><br>PASUL 1:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 2:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 3:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 4:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 5:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 6:<br>[13, 25, 50, 73, 84, 88, 93]<br><br>PASUL 7:<br>[13, 25, 50, 73, 84, 88, 93]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem9<br>nesortat = 65, 69, 32, 83, 90<br>sortat = 32, 65, 69, 83, 90<br><br>Vectorul a rezultat in urma aplicarii a 4 pasi din Selection Sort (maxim) ?<br>Fals, deoarece dupa aplicarea a 4 pasi din selection sort (maxim) cele mai mari 4 numere s-ar fi aflat la finalul vectorului, insa nu s-a intamplat acest lucru<br><br>Vectorul a rezultat in urma aplicarii a 2 pasi din Insertion Sort ?<br>Adevarat, deoarece ultimii 3 termeni ai vectorului sunt sortati ! (termenii sortati la sfarsit)<br><br>Verificati daca vectorul a rezultat in urma unei partitionari folosind pivotul 32 !<br>Aflam pozitia pe care se afla pivotul: 2<br>Verificam daca elementele din stanga sunt mai mici decat pivotul, iar cele din dreapta, mai mari. <br>Vectorul nu a rezultat in urma unei partitionari folosind pivotul 32<br><br>Sortare cu Bubble Sort:<br>Sirul este: 65, 69, 32, 83, 90<br>Dupa parcurgere sirul este: 65, 32, 69, 83, 90<br>Dupa parcurgere sirul este: 32, 65, 69, 83, 90<br>Dupa parcurgere sirul este: 32, 65, 69, 83, 90<br>La aceasta parcurgere nu se face nici o inversare !<br>Sirul este sortat !<br>v = 32, 65, 69, 83, 90<br><br>Sortare cu Selection Sort (maxim):<br>Sirul este: 65, 69, 32, 83, 90<br>Parcurgem sirul pana la elementul 90 si nu se face nicio interschimbare . <br>Sirul este: 65, 69, 32, 83, 90<br>Parcurgem sirul pana la elementul 83 si nu se face nicio interschimbare . <br>Sirul este: 65, 69, 32, 83, 90<br>Parcurgem sirul pana la elementul 32 si interschimbam 32 cu 69 .<br>Sirul este: 65, 32, 69, 83, 90<br>Parcurgem sirul pana la elementul 32 si interschimbam 32 cu 65 .<br>Sirul este sortat !<br>v = 32, 65, 69, 83, 90<br><br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem10<br><br>Generam toate combinarile posibile cu elementele vectorului,pana cand am rezolvat toate cerintele. Pentru fiecare combinare generata sterg din vector respectivele elemente si verific daca satisface vreuna din cerinte.<br> <br>---Pentru a satisface 2 pasi de sortare prin insertie directa, numarul minim de elemente care trebuiesc sterse este 2 ({45, 23}).<br>   Vectorul rezultat dupa stergeri este [1, 42, 71, 14]<br>   CONDITIA INDEPLINITA: primele 3 elemente din vector sunt sortate crescator<br>---Pentru a satisface 1 pasi de sortare prin selectia minumului, numarul minim de elemente care trebuiesc sterse este 2 ({45, 23}).<br>   Vectorul rezultat dupa stergeri este [1, 42, 71, 14]<br>   CONDITIA INDEPLINITA: pe primele 1 pozitii se afla cele mai mici elemente din vector, sortate crescator<br>---Pentru a satisface 2 pasi de sortare prin selectia maximului, numarul minim de elemente care trebuiesc sterse este 2 ({45, 14}).<br>   Vectorul rezultat dupa stergeri este [23, 1, 42, 71]<br>   CONDITIA INDEPLINITA: pe ultimele 2 pozitii se afla cele mai mari elemente din vector, sortate crescator<br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem11<br>O partitionare a vectorului este:<br>[1, 1, 5, 2, 1, 6, 95, 18, 91, 99, 48]<br><br><br>Pivotul este : 6<br>Vrem ca pivotul sa se afle pe ultima pozitie in sir<br>Daca nu se afla pe ultima pozitie atunci il interschimbam cu elementul aflat pe pozitia respectiva<br>Dupa interschimbarea pivotului sirul devine : [1, 91, 99, 1, 5, 48, 95, 18, 2, 1, 6]<br><br>Vom calcula pozitia unde trebuie sa stea pivotul,crescand indicele si efectuand interschimbari a.i. elementele mai mici sau egale sa fie in stanga sa.<br>La sfarsit pivotul va fi mutat pe pozitia corespunzatoare.<br>Pozitia pivotului este initial -1 dar va deveni cel putin 0 pe parcursul algoritmului.<br><br>Pasul 1 : Elementul 1 este mai mic decat pivotul ---> se interschimba 1 cu 1 iar pozitia pivotului devine 0<br>Vectorul la aces pas al algoritmului este : [1, 91, 99, 1, 5, 48, 95, 18, 2, 1, 6]<br><br>Pasul 2 : Elementul 91 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [1, 91, 99, 1, 5, 48, 95, 18, 2, 1, 6]<br><br>Pasul 3 : Elementul 99 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [1, 91, 99, 1, 5, 48, 95, 18, 2, 1, 6]<br><br>Pasul 4 : Elementul 1 este mai mic decat pivotul ---> se interschimba 1 cu 91 iar pozitia pivotului devine 1<br>Vectorul la aces pas al algoritmului este : [1, 1, 99, 91, 5, 48, 95, 18, 2, 1, 6]<br><br>Pasul 5 : Elementul 5 este mai mic decat pivotul ---> se interschimba 5 cu 99 iar pozitia pivotului devine 2<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 91, 99, 48, 95, 18, 2, 1, 6]<br><br>Pasul 6 : Elementul 48 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 91, 99, 48, 95, 18, 2, 1, 6]<br><br>Pasul 7 : Elementul 95 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 91, 99, 48, 95, 18, 2, 1, 6]<br><br>Pasul 8 : Elementul 18 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 91, 99, 48, 95, 18, 2, 1, 6]<br><br>Pasul 9 : Elementul 2 este mai mic decat pivotul ---> se interschimba 2 cu 91 iar pozitia pivotului devine 3<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 2, 99, 48, 95, 18, 91, 1, 6]<br><br>Pasul 10 : Elementul 1 este mai mic decat pivotul ---> se interschimba 1 cu 99 iar pozitia pivotului devine 4<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 2, 1, 48, 95, 18, 91, 99, 6]<br><br>Pasul 11 : Elementul 6 este egal cu pivotul ---> se interschimba 6 cu 48 iar pozitia pivotului devine 5<br>Vectorul la aces pas al algoritmului este : [1, 1, 5, 2, 1, 6, 95, 18, 91, 99, 48]<br><br><br><br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem12<br><br>Reconstruim arborele plecand de la parcurgerea data<br>Pentru fiecare nou voi afisa fii lui<br>8<br>|---------1<br>|---------4<br><br>1<br>|---------2<br>|---------5<br>|---------6<br>|---------7<br><br>7<br>|---------3<br><br>6<br>|---------10<br><br>4<br>|---------9<br><br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problema13<br><br>Radacina arborelui este 1<br>Parcurgerea in inordine (SRD) a arborelui este: [1, 5, 7, 10, 13, 16, 19]<br><br>Arborele reconstruit din SDR+SRD este: <br><br>                              19<br>                    16<br>          13<br>                    10<br>                              7<br>                                        5<br>1<br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem14<br><br>pentru a:[2, 3, 7, 9, 14, 10, 4, 18, 17, 15] afiseaza: DA<br><br>Arborele este:<br><br><br>                    18<br>          17<br>15<br>                              14<br>                    10<br>                              9<br>                                        7<br>          4<br>                    3<br>                              2<br><br>pentru b:[7, 8, 9, 11, 4, 15, 13, 18, 19, 16] afiseaza: DA<br><br>Arborele este:<br><br><br>          19<br>                    18<br>16<br>                    15<br>          13<br>                              11<br>                                        9<br>                                                  8<br>                                                            7<br>                    4<br><br>pentru c:[4, 5, 11, 13, 12, 15, 10, 2, 9, 3] afiseaza: NU, deoarece, 2 < 3, iar 2 este pe pozitia 7, cand ar fi trebuit sa fie pozitionat inainte de numarul 4 care se afla pe pozitia 0.<br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem15<br>0. Numerele sortate: [44, 49, 62, 70, 90, 97]<br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem17<br>Cautam elementul de pe pozitia 2.<br>Aplicam quick sort modificat.<br><br> Am ales random pivotul: 93<br> Vectorul dupa partitionarea cu pivotul 93 arata asa: <br>[49, 79, 75, 69, 71, 45, 4, 86, 63, 59, 21, 41, 93, 98, 96]<br><br> Am ales random pivotul: 79<br> Vectorul dupa partitionarea cu pivotul 79 arata asa: <br>[49, 41, 75, 69, 71, 45, 4, 21, 63, 59, 79, 86, 93, 98, 96]<br><br> Am ales random pivotul: 21<br> Vectorul dupa partitionarea cu pivotul 21 arata asa: <br>[4, 21, 75, 69, 71, 45, 41, 49, 63, 59, 79, 86, 93, 98, 96]<br>Am gasit elementul de pe pozitia 2, acesta este 21.<br> <br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem24<br>Idee de rezolvare: Cream un MIN_heap. Avem radacina a + b * sqrt(k) si inseram in heap numerele (a + 1) + b * sqrt(k) si a + (b + 1) * sqrt(k). <br>Dupa fiecare inserare reechilibram heap-ul. Afisam radacina, decapitam heap-ul si il reechilibram.<br><br>Heap:  ( 0 , 0 ) ,  ( 1 , 0 ) ,  ( 0 , 1 ) <br>Primul element este: 0<br><br>Heap:  ( 1 , 0 ) ,  ( 0 , 1 ) ,  ( 2 , 0 ) ,  ( 1 , 1 ) <br>Al 2-lea element este: 1 + 0 * sqrt(4) = 1.0 <br><br>Heap:  ( 2 , 0 ) ,  ( 0 , 1 ) ,  ( 1 , 1 ) ,  ( 3 , 0 ) ,  ( 2 , 1 ) <br>Al 3-lea element este: 2 + 0 * sqrt(4) = 2.0 <br><br>Heap:  ( 0 , 1 ) ,  ( 3 , 0 ) ,  ( 1 , 1 ) ,  ( 2 , 1 ) ,  ( 0 , 2 ) <br>Al 4-lea element este: 0 + 1 * sqrt(4) = 2.0 <br><br>Heap:  ( 1 , 1 ) ,  ( 3 , 0 ) ,  ( 0 , 2 ) ,  ( 2 , 1 ) ,  ( 1 , 2 ) <br>Al 5-lea element este: 1 + 1 * sqrt(4) = 3.0 <br><br>Heap:  ( 3 , 0 ) ,  ( 2 , 1 ) ,  ( 0 , 2 ) ,  ( 1 , 2 ) ,  ( 4 , 0 ) ,  ( 3 , 1 ) <br>Al 6-lea element este: 3 + 0 * sqrt(4) = 3.0 <br><br>Heap:  ( 0 , 2 ) ,  ( 2 , 1 ) ,  ( 3 , 1 ) ,  ( 1 , 2 ) ,  ( 4 , 0 ) ,  ( 0 , 3 ) <br>Al 7-lea element este: 0 + 2 * sqrt(4) = 4.0 <br><br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem28<br>	Cream heap-urile: <br><br>Vectorul initial: [49, 22, 40, 24, 47, 36, 0]<br>Min heap: [40, 49, 47]<br>  40<br>49  47<br>Max heap: [36, 22, 24]<br>  36<br>22  24<br>Mediana 1 este: 38.0<br><br>Vectorul initial: [49, 22, 40, 24, 47, 36, 0, 16, 12, 30, 27, 42, 7, 33, 0]<br>Min heap: [30, 36, 33, 49, 40, 47, 42]<br>      30<br>  36      33<br>49  40  47  42<br>Max heap: [27, 24, 12, 16, 22, 7]<br>      27<br>  24      12<br>16  22  7<br>Mediana 2 este: 30<br><br>Vectorul initial: [49, 22, 40, 24, 47, 36, 0, 16, 12, 30, 27, 42, 7, 33, 0, 25, 13, 46, 38, 0]<br>Min heap: [30, 36, 33, 38, 40, 47, 42, 49, 46]<br>              30<br>      36              33<br>  38      40      47      42<br>49  46<br>Max heap: [27, 24, 25, 16, 22, 7, 12, 13]<br>              27<br>      24              25<br>  16      22      7      12<br>13<br>Mediana 3 este: 30<br><br><br></pre><br><pre id="15" onclick="afisare(15)"><br><br>Problem29<br><br>15, 21, 22, 31<br><br></pre>