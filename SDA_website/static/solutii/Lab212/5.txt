<pre id="0" onclick="afisare(0)"><br><br>Problem2<br><br><br>Idee de rezolvare:<br><br>Initial, avem doua liste: shuffled_data si data. Trebuie sa ordonam elementele din shuffled_data in ordinea pe care o au in data. Pentru simplitate, prima coada va fi numita in continuare Q1, iar a doua coada Q2. Introducem elementele din shuffled_data in Q1, si parcurgem lista data cu un contor, verificand la fiecare pas daca elementul curent din data este egal cu front-ul lui Q1; daca da, il eliminam din Q1 si il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, il eliminam din Q1 si il adaugam in Q2, la final. Repetam aceeasi pasi pentru Q2: comparam front-ul lui Q2 cu elementul curent din data, daca sunt egale, scoatem elementul din Q2, il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, scoatem elementul din Q2 si il adaugam la final in Q1. Pentru optimizare, putem incepe algoritmul dupa adaugarea primului element in coada Q1, nu este nevoie sa adaugam intai toate elementele pentru ca algoritmul sa functioneze, insa avem nevoie de verificari suplimentare pentru a nu adauga/sterge elemente inexistente(nule) din cozi.<br><br>Secventa finala este: u 1 z 1 w I_1 r 1 y 1 k I_1 t 1 i 1 2 1 2 1 2 I_2 I_1 2 1 2 1 2 I_2 I_2 I_2 I_1 <br><strike>u</strike> <strike>z</strike> <strike>w</strike> <strike>r</strike> <strike>y</strike> <strike>k</strike> <strike>t</strike> <strike>i</strike> <strike>u</strike> <strike>z</strike> <strike>r</strike> <strike>t</strike> <strike>i</strike> <strike>u</strike> <br><strike>u</strike> <strike>z</strike> <strike>r</strike> <strike>y</strike> <strike>t</strike> <strike>i</strike> <strike>u</strike> <strike>z</strike> <strike>t</strike> <strike>i</strike> <br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br> Idee de rezolvare: Selectam primul element din vectorul b. Punem elementele din vectorul a in stiva pana gasim un numar egal cu cel selectat din vectorul b.<br>Cat timp stiva nu este goala si ultimul element din stiva este egal cu elementul curent din b, scoatem ultimul element din stiva, afisam p si trecem mai departe in b. <br>Se repeta procedeul pana cand toate elementele lui a au fost introduse in stiva.<br>	Adaugam 6 la operatii si adaugam elementul 6 in stiva<br>	<table border=1><tr><td>6</td></tr></table><br>	Adaugam 1 la operatii si adaugam elementul 1 in stiva<br>	<table border=1><tr><td>6</td><td>1</td></tr></table><br>	Adaugam 7 la operatii si adaugam elementul 7 in stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td></tr></table><br>	Adaugam 5 la operatii si adaugam elementul 5 in stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td></tr></table><br>	Adaugam 2 la operatii si adaugam elementul 2 in stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td>2</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 2 din stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td><strike>2</strike> </td></tr></table><br>	Adaugam 4 la operatii si adaugam elementul 4 in stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td>4</td></tr></table><br>	Adaugam 3 la operatii si adaugam elementul 3 in stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td>4</td><td>3</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 3 din stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td>4</td><td><strike>3</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 4 din stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td>5</td><td><strike>4</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 5 din stiva<br>	<table border=1><tr><td>6</td><td>1</td><td>7</td><td><strike>5</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 7 din stiva<br>	<table border=1><tr><td>6</td><td>1</td><td><strike>7</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 1 din stiva<br>	<table border=1><tr><td>6</td><td><strike>1</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 6 din stiva<br>	<table border=1><tr><td><strike>6</strike> </td></tr></table><br>Operatiile necesare aplicate:<br>6 1 7 5 2 p 4 3 p p p p p p <br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br>Idee de rezolvare: Mutam elementele din stiva in prima coada pana la elementul cautat, pe care il  stergem. Mutam elem. din prima coada in cealalta pana cand in prima coada ramane un singur element,pe care il adaugam in stiva. Repetam procedeul pentru fiecare coada alternativ, pana cand acestea devin vide si astfel elementele sunt adaugate in ordinea corecta in stiva<br><br>Stiva este: [8, 4, 1, 5, 7, 10, 3]<br>Rezolvare: Mutam elementele din stiva in coada 1, pana gasim elementul de sters, adica 4<br>P: Mutam elementul 3 in coada 1<br>P: Mutam elementul 10 in coada 1<br>P: Mutam elementul 7 in coada 1<br>P: Mutam elementul 5 in coada 1<br>P: Mutam elementul 1 in coada 1<br>S: Stergem elementul 4 din stiva<br><br>Stiva devine: [8], prima coada devine: [3, 10, 7, 5, 1] a doua coada devine []<br><br>Mutam cate un element din coada nevida in coada vida pana cand in coada din care se face extragerea ramane un singur el.,pe care il adaugam in stiva:<br>1: Mutam din coada 1 elem. 3 in coada 2<br>1: Mutam din coada 1 elem. 10 in coada 2<br>1: Mutam din coada 1 elem. 7 in coada 2<br>1: Mutam din coada 1 elem. 5 in coada 2<br>I_1: Stergem elementul 1 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [8, 1], prima coada devine: [], a doua coada devine: [3, 10, 7, 5]<br><br>2: Mutam din coada 2 elem 3 in coada 1<br>2: Mutam din coada 2 elem 10 in coada 1<br>2: Mutam din coada 2 elem 7 in coada 1<br>I_2: Stergem elementul 5 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[8, 1, 5], prima coada devine:[3, 10, 7], a doua coada devine:[]<br>1: Mutam din coada 1 elem. 3 in coada 2<br>1: Mutam din coada 1 elem. 10 in coada 2<br>I_1: Stergem elementul 7 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [8, 1, 5, 7], prima coada devine: [], a doua coada devine: [3, 10]<br><br>2: Mutam din coada 2 elem 3 in coada 1<br>I_2: Stergem elementul 10 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[8, 1, 5, 7, 10], prima coada devine:[3], a doua coada devine:[]<br>I_1: Stergem elementul 3 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [8, 1, 5, 7, 10, 3], prima coada devine: [], a doua coada devine: []<br><br>Succesiunea operatiilor este: P, P, P, P, P, S, 1, 1, 1, 1, I_1, 2, 2, 2, I_2, 1, 1, I_1, 2, I_2, I_1<br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>1. Inserati urmatoarele valori, pe rand, intr-un arbore binar de cautare: [68, 25, 2, 49, 35, 2, 15, 37, 36, 13, 95, 39, 56, 6, 39]<br>2. Scrieti nodurile care se pot sterge in doua moduri. <br>3. Stergeti elementul: 39<br>Idee de rezolvare: Vom insera elemente in arbore folosind o functie prin recurenta care<br>        returneaza radacina arborelui, deoarece avem nevoie de referinta. Stergerea unui element se va face <br>        in functie de caz: daca are 0, 1 sau 2 copii. In primele 2 cazuri gasim parintele, cu ajutorul <br>        functiei parent, iar apoi mutam referinta nodului parintelui la None, respectiv la copilul <br>        nodului. In al treilea caz, cautam nodul cu care nodul nostru va fi inlocuit cu ajutorul <br>        functiei minValue(care ia cel mai mic nod din dreapta), punem valoarea in nodul curent, apoi<br>        stergem nodul cu care am inlocuit. Elementele care pot fi sterse in 2 moduri sunt cele care au 2 copii,<br>        iar acestea vor fi gasite cu ajutorul functiilor children(calculeaza numarul de copii) si morechildren<br>        (gaseste nodurile care au 2 copii)<br>ELementele arborelui in inordine sunt: [6, 13, 15, 2, 36, 39, 37, 35, 56, 49, 25, 95, 68]<br>ELementele arborelui in preordine sunt: [68, 25, 2, 15, 13, 6, 49, 35, 37, 36, 39, 56, 95]<br>Elementele care se pot sterge in 2 moduri sunt: [25, 37, 49, 68]<br>Elementul care trebuie sters este: 39<br>Arborele, din care s-a sters 39: [68, 25, 2, 15, 13, 6, 49, 35, 37, 36, 56, 95]<br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem7<br>Reconstruim arborele si facem parcurgerile:<br>Parcurgerea SRD a arborelui binar creat este:[17, 7, 6, 29, 1, 26, 39]<br>Parcurgerea RSD a arborelui binar creat este:[29, 17, 6, 7, 1, 39, 26]<br>Parcurgerea SDR a arborelui binar creat este: [7, 6, 17, 26, 39, 1, 29]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem8<br>============================= <br><br>a) - Aplicam 3 pasi din Insertion Sort vectorului [21, 91, 83, 79, 20, 50, 35, 44, 69, 7]: <br>	 pasul 1: [21, 91, 83, 79, 20, 50, 35, 44, 69, 7]<br>	 pasul 2: [21, 83, 91, 79, 20, 50, 35, 44, 69, 7]<br>	 pasul 3: [21, 79, 83, 91, 20, 50, 35, 44, 69, 7]<br>	 Dupa Selection Sort, vectorul devine: [21, 79, 83, 91, 20, 50, 35, 44, 69, 7] <br><br> - Aplicam 2 pasi din Bubble Sort vectorului [21, 79, 83, 91, 20, 50, 35, 44, 69, 7]: <br>	 pasul 1: [21, 79, 83, 20, 50, 35, 44, 69, 7, 91]<br>	 pasul 2: [21, 79, 20, 50, 35, 44, 69, 7, 83, 91]<br>	 Dupa Bubble Sort, vectorul devine: [21, 79, 20, 50, 35, 44, 69, 7, 83, 91] <br><br>Rezultat: [21, 79, 20, 50, 35, 44, 69, 7, 83, 91]<br><br>============================= <br><br>b) - Aplicam 4 pasi din Maximum Selection Sort vectorului [21, 91, 83, 79, 20, 50, 35, 44, 69, 7]: <br>	 pasul 1:  [21, 91, 83, 79, 20, 50, 35, 44, 69, 7]<br>	 pasul 2:  [21, 7, 83, 79, 20, 50, 35, 44, 69, 91]<br>	 pasul 3:  [21, 7, 69, 79, 20, 50, 35, 44, 83, 91]<br>	 pasul 4:  [21, 7, 69, 44, 20, 50, 35, 79, 83, 91]<br>- Aplicam 3 pasi din Minimum Selection Sort vectorului [21, 7, 35, 44, 20, 50, 69, 79, 83, 91]: <br>	 pasul 1:  [7, 21, 35, 44, 20, 50, 69, 79, 83, 91]<br>	 pasul 2:  [7, 20, 35, 44, 21, 50, 69, 79, 83, 91]<br>	 pasul 3:  [7, 20, 21, 44, 35, 50, 69, 79, 83, 91]<br>	 pasul 4:  [7, 20, 21, 35, 44, 50, 69, 79, 83, 91]<br>Rezultat: [7, 20, 21, 35, 44, 50, 69, 79, 83, 91]<br><br>========================<br><br>c) Aplic partitionare Hoare punand fiecare element al vectorului ca pivot<br> 	 >Aleg 21 drept pivot, vectorul devine: [7, 20, 83, 79, 91, 50, 35, 44, 69, 21]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 91 drept pivot, vectorul devine: [21, 7, 83, 79, 20, 50, 35, 44, 69, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 83 drept pivot, vectorul devine: [21, 7, 69, 79, 20, 50, 35, 44, 83, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 79 drept pivot, vectorul devine: [21, 7, 69, 44, 20, 50, 35, 79, 83, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 20 drept pivot, vectorul devine: [7, 20, 83, 79, 91, 50, 35, 44, 69, 21]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 50 drept pivot, vectorul devine: [21, 7, 44, 35, 20, 50, 79, 83, 69, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 35 drept pivot, vectorul devine: [21, 7, 35, 20, 79, 50, 83, 44, 69, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 44 drept pivot, vectorul devine: [21, 7, 44, 35, 20, 50, 79, 83, 69, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 69 drept pivot, vectorul devine: [21, 7, 69, 44, 20, 50, 35, 79, 83, 91]<br>		 *Nu-l putem folosi drept pivot<br>	 >Aleg 7 drept pivot, vectorul devine: [7, 91, 83, 79, 20, 50, 35, 44, 69, 21]<br>		 *Nu-l putem folosi drept pivot<br><br><br>============================= <br><br>d)exemplific Insertion Sort<br>	 pasul 1:  [21, 91, 83, 79, 20, 50, 35, 44, 69, 7] <br>	 pasul 2:  [21, 83, 91, 79, 20, 50, 35, 44, 69, 7] <br>	 pasul 3:  [21, 79, 83, 91, 20, 50, 35, 44, 69, 7] <br>	 pasul 4:  [20, 21, 79, 83, 91, 50, 35, 44, 69, 7] <br>	 pasul 5:  [20, 21, 50, 79, 83, 91, 35, 44, 69, 7] <br>	 pasul 6:  [20, 21, 35, 50, 79, 83, 91, 44, 69, 7] <br>	 pasul 7:  [20, 21, 35, 44, 50, 79, 83, 91, 69, 7] <br>	 pasul 8:  [20, 21, 35, 44, 50, 69, 79, 83, 91, 7] <br>	 pasul 9:  [7, 20, 21, 35, 44, 50, 69, 79, 83, 91] <br>	 Dupa Insertion Sort, vectorul este sortat : [7, 20, 21, 35, 44, 50, 69, 79, 83, 91] <br><br>Exemplific Selection Sort (minim)<br>	 pasul 1: [7, 91, 83, 79, 20, 50, 35, 44, 69, 21]<br>	 pasul 2: [7, 20, 83, 79, 91, 50, 35, 44, 69, 21]<br>	 pasul 3: [7, 20, 21, 79, 91, 50, 35, 44, 69, 83]<br>	 pasul 4: [7, 20, 21, 35, 91, 50, 79, 44, 69, 83]<br>	 pasul 5: [7, 20, 21, 35, 44, 50, 79, 91, 69, 83]<br>	 pasul 6: [7, 20, 21, 35, 44, 50, 79, 91, 69, 83]<br>	 pasul 7: [7, 20, 21, 35, 44, 50, 69, 91, 79, 83]<br>	 pasul 8: [7, 20, 21, 35, 44, 50, 69, 79, 91, 83]<br>	 pasul 9: [7, 20, 21, 35, 44, 50, 69, 79, 83, 91]<br>	 pasul 10: [7, 20, 21, 35, 44, 50, 69, 79, 83, 91]<br>Dupa Selection Sort, vectorul este sortat : [7, 20, 21, 35, 44, 50, 69, 79, 83, 91]<br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem9<br>9. Solutia problemei: <br>1. A/F ca [47, 51, 83, 40, 7, 78, 96, 92, 4] rezulta din 3 pasi de Selection Sort (Maxim) : <br>51 > 47 => (FALS) <br><br> 2. A/F ca [47, 51, 83, 40, 7, 78, 96, 92, 4] rezulta din 3 pasi de Insertion Sort : <br>51 > 47<br>83 > 51<br>(ADEVARAT) <br><br>3. A/F partitionat pentru Quicksort cu pivotul 4 <br>i. Pozitia pivotului = 9<br>ii. Vf. elementele de la stanga sunt mai mici <br>47 >= 4 => (FALS) <br><br>iii. Vf elementele de la dreapta mai mari<br>4. Exemplificam Bubble sort: <br>i.Vectorul are 9 elemente <br>ii.Cat timp facem interschimbari = > nu am terminat <br>0: [47, 51, 83, 40, 7, 78, 96, 92, 4]<br>1: [47, 51, 40, 7, 78, 83, 92, 4, 96]<br>2: [47, 40, 7, 51, 78, 83, 4, 92, 96]<br>3: [40, 7, 47, 51, 78, 4, 83, 92, 96]<br>4: [7, 40, 47, 51, 4, 78, 83, 92, 96]<br>5: [7, 40, 47, 4, 51, 78, 83, 92, 96]<br>6: [7, 40, 4, 47, 51, 78, 83, 92, 96]<br>7: [7, 4, 40, 47, 51, 78, 83, 92, 96]<br>8: [4, 7, 40, 47, 51, 78, 83, 92, 96]<br><br>5.Exemplificam Selection Sort(Maxim): <br>i.Vectorul are 9 elemente <br>0: [47, 51, 83, 40, 7, 78, 96, 92, 4]<br>1: [96, 51, 83, 40, 7, 78, 47, 92, 4]<br>2: [96, 92, 83, 40, 7, 78, 47, 51, 4]<br>3: [96, 92, 83, 40, 7, 78, 47, 51, 4]<br>4: [96, 92, 83, 78, 7, 40, 47, 51, 4]<br>5: [96, 92, 83, 78, 51, 40, 47, 7, 4]<br>6: [96, 92, 83, 78, 51, 47, 40, 7, 4]<br>7: [96, 92, 83, 78, 51, 47, 40, 7, 4]<br>8: [96, 92, 83, 78, 51, 47, 40, 7, 4]<br><br><br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem10<br>Pentru toate cazurile generam submultimi de elemente din vector pentru a cauta-o pe aceea care <br>are numarul minim de elemente pe care sa le putem sterge pentru a satisface fiecare cerinta.<br>Generarea submultimilor se face prin selectia combinarilor de n elemente luate cate nrPasi <br>corespunzator subpunctului.<br>La fiecare pas din cerinta iteram prin combinarile genrate si le alegem pe cele care au o<br>lungime corespunzatoarenumarului de pasi pe care l-a facut altgoritmul si sunt sortate<br><br>a)Selectia maximului.<br><br>Pentru selectia maximului am gasit 24 subseturi de lungime 2 : [4, 11] [4, 8] [4, 10] [4, 9] [4, 7] [4, 6] [4, 5] [8, 10] [8, 9] [2, 3] [2, 9] [2, 7] [2, 6] [2, 5] [0, 3] [0, 9] [0, 7] [0, 6] [0, 5] [0, 1] [3, 9] [3, 7] [3, 6] [3, 5] <br>Aceste subseturi au lungimea egala cu numarul de pasi(2) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mari decat sP<br>	- care sunt mai mici decat s1 si se afla dupa s1 in vector<br>	- care sunt mai mici decat sP si se afla dupa sP in vector<br>	- care apartin intervalului [s1, sP], dar nu sunt in secventa<br><br>Pentru secventa [4, 11] elementele [ 8 10 2 0 3 9 7 6 5 1 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [4, 8] elementele [ 11 10 2 0 3 9 7 6 5 1 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 8 => stergem: [4 11 8 10 7 6 5 1] <br><br>b)Selectia minimului:<br><br>Pentru selectia minimului am gasit 10 subseturi de lungime 3 : [4, 8, 10] [4, 8, 9] [2, 3, 9] [2, 3, 7] [2, 3, 6] [2, 3, 5] [0, 3, 9] [0, 3, 7] [0, 3, 6] [0, 3, 5] <br>Aceste subseturi au lungimea egala cu numarul de pasi(3) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP si se afla la stanga lui sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>Pentru secventa [4, 8, 10] elementele [ 11 2 0 3 9 7 6 5 1 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [4, 8, 9] elementele [ 11 10 2 0 3 7 6 5 1 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 9 => stergem: [11 2 0 3 9 7 6 5 1] <br><br>c)Insertie:<br><br>Pentru insertie am gasit 0 subseturi care respecta cerinta : <br>Aceste subseturi au lungimea egala cu numarul de pasi+1(3+1=4) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>RASPUNS: Nu s-a gasit nici o solutie pentru a se executa 3 pasi din algoritmul de insertie directa<br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem11<br>Idee de rezolvare:<br>Partitionarea Lomuto are ca scop alegerea unui element dintr-un vector de numere, care se va numi<br>pivot si modificarea pozitiilor elementelor din vector astfel incat, la finalul algoritmului,<br>elementele cu valoare mai mica decat pivotul se vor afla la stanga sa, iar cele mai mari decat<br>pivotul, in dreapta acestuia, pivotul ajungand pe pozitia in care ar sta daca am sorta vectorul.<br><br>Interschimbam 27 cu 27 iar i devine 0<br>Sirul devine:[27, 35, 42, 3, 65, 26, 52, 78, 36]<br><br>Interschimbam 35 cu 35 iar i devine 1<br>Sirul devine:[27, 35, 42, 3, 65, 26, 52, 78, 36]<br><br>Interschimbam 3 cu 42 iar i devine 2<br>Sirul devine:[27, 35, 3, 42, 65, 26, 52, 78, 36]<br><br>Interschimbam 26 cu 42 iar i devine 3<br>Sirul devine:[27, 35, 3, 26, 65, 42, 52, 78, 36]<br><br>Trecem la urmatorul element din sir.<br>Am ajuns la capatul sirului. In final, avem vectorul partitionat: [27, 35, 3, 26, 36, 42, 52, 78, 65]<br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problem12<br>12. Idee de rezolvare: Construim vectorul tata asociat arborelui.<br><br>Parcurgem numerele date de la stanga la dreapta.<br>Primul numar din parcurgere este radacina si are tatal -1.<br>Tatal unui numar gasit pentru prima data este precedentul sau.<br>Daca elementul a mai fost intalnit trecem mai departe.<br><br>5 este radacina.<br>2 nevizitat => 5 = tatal <br>1 nevizitat => 2 = tatal <br>0 nevizitat => 1 = tatal <br>3 nevizitat => 0 = tatal <br>7 nevizitat => 0 = tatal <br>8 nevizitat => 0 = tatal <br>4 nevizitat => 2 = tatal <br>9 nevizitat => 2 = tatal <br>6 nevizitat => 5 = tatal <br><br>                    1<br>                                        3<br><br>                              0<br><br>                                        7<br><br>                                        8<br><br>                    4<br><br>          2<br><br>                    9<br><br>5<br><br>          6<br><br>Vectorul de tati este [1, 2, 5, 0, 2, -1, 5, 0, 0, 2]<br><br>Fii nodurilor sunt:<br>0 -> 3  7  8  <br>1 -> 0  <br>2 -> 1  4  9  <br>3 -> frunza<br>4 -> frunza<br>5 -> 2  6  <br>6 -> frunza<br>7 -> frunza<br>8 -> frunza<br>9 -> frunza<br><br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem13<br>Idee de rezolvare: <br>Deoarece deja stim ca se cere un Arbore Binar de Cautare, fixam ultimul element din parcurgere ca fiind radacina si o impartim in doua intervale: <br>	-prima parte contine numere mai mici decat radacina si setul de elemente va merge in stanga acesteia <br>	-a doua parte contine numere mai mari decat radacina si setul de elemente va merge in dreapta acesteia <br>Repetam recursiv pentru fiecare interval.<br>Arborele construit este:<br><br><br>Nod: 27; Fiu stanga: 14<br>Nod: 14; Fiu stanga: 8; Fiu dreapta: 26<br>Nod: 8; Fiu stanga: 5; Fiu dreapta: 13<br>Nod: 5<br>Nod: 13<br>Nod: 26; Fiu stanga: 24<br>Nod: 24<br><br>27 -------<br>|<br><br>                26 ---<br>                |<br><br>                        24 -<br>                        |<br><br>        14 -----<br>        |<br><br>                        13 -<br>                        |<br><br>                8 ---<br>                |<br><br>                        5 -<br>                        |<br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem13<br>Idee de rezolvare: <br>Deoarece deja stim ca se cere un Arbore Binar de Cautare, fixam ultimul element din parcurgere ca fiind radacina si o impartim in doua intervale: <br>	-prima parte contine numere mai mici decat radacina si setul de elemente va merge in stanga acesteia <br>	-a doua parte contine numere mai mari decat radacina si setul de elemente va merge in dreapta acesteia <br>Repetam recursiv pentru fiecare interval.<br>Arborele construit este:<br><br><br>Nod: 39; Fiu stanga: 19; Fiu dreapta: 46<br>Nod: 19; Fiu stanga: 6; Fiu dreapta: 33<br>Nod: 6; Fiu stanga: 2<br>Nod: 2<br>Nod: 33; Fiu stanga: 24; Fiu dreapta: 37<br>Nod: 24<br>Nod: 37<br>Nod: 46<br><br>        46 -----<br>        |<br><br>39 -------<br>|<br><br>                        37 -<br>                        |<br><br>                33 ---<br>                |<br><br>                        24 -<br>                        |<br><br>        19 -----<br>        |<br><br>                6 ---<br>                |<br><br>                        2 -<br>                        |<br><br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem14<br>Idee de rezolvare:<br>Arborele binar de cautare se construieste pe principiul: un element mai mic decat tatal lui merge in stanga, iar elementul mai mare decat tatal lui merge in dreapta<br> Arborele binar de cautare construit pe baza secventei este:<br> _9_____________ <br>/               \<br>6      ________89<br> \    /          <br> 7   22_____     <br>    /       \    <br>   16    __66_   <br>        /     \  <br>       40_   86  <br>          \      <br>         46      <br><br>Parcurgere in postordine inseamna: elementul din stanga, elementul din dreapta,radacina<br> Parcurgerea in postordine este:[7, 6, 16, 46, 40, 86, 66, 22, 89, 9]<br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem15<br>Idee de rezolvare: Pentru fiecare nod construim intai subarborele stang, apoi subarborele drept.<br>Arborele construit este: <br>Nod: 0 Fiu stanga: 32 <br>Nod: 32 Fiu dreapta: 8 <br>Nod: 8 Fiu dreapta: 45 <br>Nod: 45 Fiu stanga: 23 Fiu dreapta: 15 <br>Nod: 23 <br>Nod: 15 Fiu dreapta: 12 <br>Nod: 12 Fiu dreapta: 49 <br>Nod: 49 <br><br>0 -------<br>|<br><br>                                                49 <br>                                                |<br><br>                                        12 <br>                                        |<br><br>                                15 <br>                                |<br><br>                        45 -<br>                        |<br><br>                                23 <br>                                |<br><br>                8 ---<br>                |<br><br>        32 -----<br>        |<br><br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem16<br><br><br>Idee de rezolvare:<br><br>Initial, avem vectorul v, indexul pivotului Ipiv si capetele vectorului: left si right.Primul pas este sa punem pivotul pe ultima pozitie prin interschimbare si sa se initieze numarul interschimbarilor cu 0.Parcurgem vectorul de la stanga la dreapta si cat timp valoarea elementului de pe pozitia j este egala cu valoarea pivotului, testam daca pozitia j este mai mica decat capatul din dreapta al vectorului, daca da, scad valoarea indicelui capatului de interval cu 1, interschimb valoarea curenta cu valoarea noului capat de interval cu indicele decrementat mai sus si valoarea lui nr se incrementeaza cu 1. Daca pozitia j este mai mare decat capatul din dreapta al vectorului, se trece la urmatorul element din vector dupa ce se testeaza pasul urmator. Testam daca valoarea curenta este mai mica decat cea a pivotului si daca da se interschimba valoarea curenta cu valoarea indicelui i+1, astfel toate numerele mai mici decat pivotul sunt plasate la inceputul vectorului.Valoarea i se opreste la ultimul element mai mic sau egal decat pivotul si mutam pivotul dupa valoarea din sir cu indicele i.Se parcurge sirul si se muta elementele mai mici sau egale cu pivotul inaintea pivotului si cele mai mari dupa el.Se muta elementele la inceputul vectorului pana la pozitia i+1. <br><br>Indexul pivotului este: 9<br><br>Inainte de mutarea elementelor egale cu pivotul:<br>[3, 0, 3, 0, 2, 5, 5, 5, 5, 4]<br>Pivootul si toate elementele egale cu pivotul sunt la sfarsitul sirului <br>Acum mutam pivotul si dublurile dupa ultimul element mai mic decat pivotul<br><br><br><br>Secventa finala este: 3 0 3 0 2 4 5 5 5 5 <br><br> Numarul de interschimbari este:6<br></pre><br><pre id="15" onclick="afisare(15)"><br><br>Problem17<br>Idee de rezolvare:<br>Folosim quicksort, numai ca atunci cand apelam recursiv, ne intrebam in ce parte fata de indexul pivotului se afla k si apelam numai in acea parte.<br><br>Sirul initial este:             [12, 20, 21, 2, 3, 4, 28, 19, 5, 9, 18, 13, 26, 11, 6]<br>Sirul dupa quicksort arata asa: [2, 3, 4, 5, 6, 9, 11, 12, 13, 18, 19, 20, 21, 26, 28]<br>K este egal cu 8=> v[8] = 12<br>Dupa algoritmul nostru, am gasit elementul:12<br><br></pre><br><pre id="16" onclick="afisare(16)"><br><br>Problem19<br>Heap-ul initial este [2, 20, 34, 23, 54, 93, 82, 36]<br>Scot elementul 2 din heap<br> [20, 23, 34, 36, 54, 93, 82] <br>Scot elementul 20 din heap<br> [23, 36, 34, 82, 54, 93] <br>Scot elementul 23 din heap<br> [34, 36, 93, 82, 54] <br>Scot elementul 34 din heap<br> [36, 54, 93, 82] <br>Scot elementul 36 din heap<br> [54, 82, 93] <br>Scot elementul 54 din heap<br> [82, 93] <br>Scot elementul 82 din heap<br> [93] <br>Scot elementul 93 din heap<br> [] <br><br></pre><br><pre id="17" onclick="afisare(17)"><br><br>Problem22<br>============================================<br>	Rezolvare:<br>Idee de rezolvare: Permutam toate elementele din heap-ul initial, in afara de radacina, iar dupa aceea<br> am adaugat radacina la fiecare permutare si dupa am facut cate un min-heap.Apoi am memorat min-heap-ul<br> gasit, diferit de min-heap-ul initial si de toate min-heap-urile gasite precedent.<br> Min-heap initial : [17, 32, 66, 78, 57] <br>Alte min-heap-uri fata de cel initial:<br>[[17, 32, 57, 78, 66], [17, 32, 66, 57, 78], [17, 32, 57, 66, 78]]<br></pre><br><pre id="18" onclick="afisare(18)"><br><br>Problem23<br>Ideea de rezolvare:<br>Aplicam shiftDown pentru nodurile de la [n/2,0] (in ordinea asta).<br>Shiftdown compara recursiv un nod i cu cei 2 copii si se interschimba<br>cu cel mai mic si aplicam algoritmul pana ajungem la o frunza.<br>Dupa pasul 1 sirul nostru arata astfel:<br>[10, 1, 3, 5, 9, 6, 4, 11, 0]<br>Dupa pasul 2 sirul nostru arata astfel:<br>[10, 1, 3, 0, 9, 6, 4, 11, 5]<br>Dupa pasul 3 sirul nostru arata astfel:<br>[10, 1, 3, 0, 9, 6, 4, 11, 5]<br>Dupa pasul 4 sirul nostru arata astfel:<br>[10, 0, 3, 1, 9, 6, 4, 11, 5]<br>Dupa pasul 5 sirul nostru arata astfel:<br>[0, 1, 3, 5, 9, 6, 4, 11, 10]<br>In final vom obtine min-ansamblul: <br>[0, 1, 3, 5, 9, 6, 4, 11, 10]<br>Complexitatea algoritmului este O(n).<br></pre><br><pre id="19" onclick="afisare(19)"><br><br>Problem25<br>3. Solutia problemei: <br>	0.Vectorul este: [12, 15, 55, 27, 37, 77, 97]<br>	1.Adaugam noduri in heap: <br>		1.1 : [12]<br>		1.2 : [12, 15]<br>			15 >= 12 : Swap<br>		1.3 : [15, 12, 55]<br>			55 >= 15 : Swap<br>		1.4 : [55, 12, 15, 27]<br>		1.5 : [55, 12, 15, 27, 37]<br>			37 >= 12 : Swap<br>		1.6 : [55, 37, 15, 27, 12, 77]<br>			77 >= 37 : Swap<br>			77 >= 55 : Swap<br>		1.7 : [77, 55, 15, 27, 12, 37, 97]<br>			97 >= 55 : Swap<br>			97 >= 77 : Swap<br>	2.Arborele in heap : [97, 77, 15, 27, 12, 37, 55]<br>	3.Pentru decapitare interschimbam : 97 si 55<br>	4.Arborele decapitat [55, 77, 15, 27, 12, 37]<br>		4.1 : 77 > 55 : [55, 77, 15, 27, 12, 37]<br>	5.Arborele rearanjat [77, 55, 15, 27, 12, 37]<br><br></pre><br><pre id="20" onclick="afisare(20)"><br><br>Problem28<br>Vectorul primit este: [15, 5, 10, 12, 0, 0, 13, 0]<br>Vectorul sortat, fara 0, arata asa: [5, 10, 12, 13, 15]<br>Valoarea mediana trebuie sa fie: 12<br><br>min_heap este: [12, 15]<br>max_heap este: [-10, -5]<br>valoarea mediana este: 11.0<br><br>min_heap este: [12, 15]<br>max_heap este: [-10, -5]<br>valoarea mediana este: 11.0<br><br>min_heap este: [12, 15, 13]<br>max_heap este: [-10, -5]<br>valoarea mediana este: 12<br><br><br></pre><br><pre id="21" onclick="afisare(21)"><br><br>Problem29<br>Idee de rezolvare:<br><br>Inseram intr-un vector v1 primele elemente mai mari decat 0 (daca primim un zero inainte, inseamna ca nu avem k elemente, deci le afisam pe toate).<br><br>Acum in acel vector v1 avem k elemente.<br><br>Continuam sa citim urmatoarele elemente intr-un vector v2. Cand primim 0, punem la gramada elemente lui v1 si ale lui v2 si aplicam statistici de ordine ca sa obtinem cele mai mari elemente din v1 si v2. Facem o partitionare quicksort cu un pivot ales la intamplare, si verificam daca pivotul este pe a k-a pozitie sau nu; daca k > pozitia, partitionam la stanga; daca k < pozitia, partitionam la dreapta; altfel, ne aflam pe pozitia k si acesta este numarul cautat.<br><br>Sirul dat : 92 49 7 80 12 54 0 77 27 50 4<br>k= 4<br><br>v1: 92 49 7 80<br>v2: 12 54<br>v: 92 49 7 80 12 54 => 7 12 49 54 80 92<br>Cele mai mari k elemente: 49 54 80 92<br><br><br></pre><br><pre id="22" onclick="afisare(22)"><br><br>Problem30<br>Idee de rezolvare: <br><br>Vom crea doua matrici, una care va contine numarul minim de insertii pe pozitia i,j pentru subsirul [i:j], iar cealalta care va contine palindromul creat prin numar minim de insertii pentru subsirul [i:j], pe pozitia i,j (doar deasupra diagonalei principale, matrici inferior triunghiulare).<br><br>Matricea cu numarul de insertii:<br>Parcurgem diagonalele paralele cu diagonala principala, si pentru subsirul [i:j] punem in matrice la pozitia i,j numarul minim de insertii necesar pentru a crea un palindrom.Luam capetele subsirului, le comparam: daca sunt egale, atunci nu avem nevoie de insertii, subsirul [i:j] are nevoie de tot atatea insertii ca subsirul [i+1:j-1]; in caz contrar, subsirul [i:j] are nevoie cu o insertie mai mult decat minimul dintre numarul de insertii necesar subsirului [i:j-1], respectiv [i+1:j]. <br><br>Matricea cu palindroame pentru orice subsir [i:j]:<br>Matricea e goala la inceput, cu exceptia diagonalei principale, care contine literele din sir. Parcurgem diagonalele paralele cu diagonala principala, si construim palindromul pentru subsirul [i:j], folosindu-ne de ce avem in stanga si dedesubt.<br><br>b ebe debed adebeda fadebedaf <br>    e   ded   adeda   fadedaf <br>          d     ada     fadaf <br>                  a       faf <br>                            f <br><br>0 1 2 3 4 <br>0 0 1 2 3 <br>0 0 0 1 2 <br>0 0 0 0 1 <br>0 0 0 0 0 <br><br><br>Numarul minim de insertii este 4, iar palindromul rezultat este fadebedaf<br></pre><br><pre id="23" onclick="afisare(23)"><br><br>Problem31<br>31. Solutia problemei: <br>Idee de rezolvare: punem numerele din forma postfixata in stiva pana gasim un semn de operatie, apoi scoatem din stiva ultimele doua elemente.<br>Primul operand este al doilea numar scos. Facem operatia respectiva si punem rezultatul in stiva.<br>Repetam procedeul pana in stiva ramane un singur numar, acela fiind rezultatul expresiei.<br><br><table border=1><tr><td>5</td></tr></table><br><table border=1><tr><td>5</td><td>6</td></tr></table><br><table border=1><tr><td>5</td><td>6</td><td>3</td></tr></table><br><table border=1><tr><td>5</td><td>6</td><td>3</td><td>4</td></tr></table><br>Am gasit semnul +<br><table border=1><tr><td>5</td><td>6</td><td><strike>3<strike></td><td><strike>4<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul adunarii lor<br><table border=1><tr><td>5</td><td>6</td><td>7</td><td>9</td></tr></table><br><table border=1><tr><td>5</td><td>6</td><td>7</td><td>9</td><td>2</td></tr></table><br>Am gasit semnul +<br><table border=1><tr><td>5</td><td>6</td><td>7</td><td><strike>9<strike></td><td><strike>2<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul adunarii lor<br>Am gasit semnul -<br><table border=1><tr><td>5</td><td>6</td><td><strike>7<strike></td><td><strike>11<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul scaderii lor<br><table border=1><tr><td>5</td><td>6</td><td>-4</td><td>8</td></tr></table><br>Am gasit semnul *<br><table border=1><tr><td>5</td><td>6</td><td><strike>-4<strike></td><td><strike>8<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul inmultirii lor<br><table border=1><tr><td>5</td><td>6</td><td>-32</td></tr></table><br>Am gasit semnul -<br><table border=1><tr><td>5</td><td><strike>6<strike></td><td><strike>-32<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul scaderii lor<br>Am gasit semnul -<br><table border=1><tr><td><strike>5<strike></td><td><strike>38<strike></td></tr></table><br>Scoatem ultimele doua numere si punem in stiva rezultatul scaderii lor<br><br>                              8<br>                    *<br>                                                  2<br>                                        +<br>                                                  9<br>                              -<br>                                                  4<br>                                        +<br>                                                  3<br>          -<br>                    6<br>-<br>          5<br><br>Expresia este 5-(6-(((3+4)-(9+2))*8))<br>Rezultatul este -33<br></pre><br><pre id="24" onclick="afisare(24)"><br><br>Problem32<br>Parcurgem arborele incepand cu radacina pana gasim nodul cautat. De fiecare data cand ne mutam la un nod verificam daca este cel cautat. Altfel, decidem daca mergem la nodul din stanga, respectiv nodul din dreapta<br>		Nodul curent nu are valoarea 28<br>	> Numarul cautat 28 >= 24. Ne mutam la nodul din dreapta<br>		Nodul curent nu are valoarea 28<br>	> Numarul cautat 28 >= 27. Ne mutam la nodul din stanga<br>		Nodul curent nu are valoarea 28<br><br>Numarul 28 NU se afla in acest arbore<br><br></pre><br><pre id="25" onclick="afisare(25)"><br><br>problem33<br>Am ales nodul 13 pentru a dezechilibra arborele<br>Nu putem roti la dreapta nodul<br>Am ales nodul 66 pentru a dezechilibra arborele<br>Dupa rotatia la dreapta, arborele este:<br>R----40<br>     L----29<br>     |    L----27<br>     |    |    L----13<br>     |    R----38<br>     R----66<br>          R----67<br>Am ales nodul 13 pentru a dezechilibra arborele<br>Nu putem roti la dreapta nodul<br><br></pre><br><pre id="26" onclick="afisare(26)"><br><br>Problem37<br>a) Se construieste arborele:<br>Se iau caracterele cu ponderile cele mai mici:<br>T,8 si I,9<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,17<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>O,12 si Z,13<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,25<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>C,14 si A,16<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,30<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>$,17 si N,22<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,39<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>$,25 si $,30<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,55<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>$,39 si $,55<br>Si facem nodul ce are ca valoare "$" si suma ponderilor:$,94<br>Se aplica acelas procedeu in continuare, alegadu-se cele mai mici ponderi,dintre caracterele initiale, dar si noile noduri fomate<br>Arborele final:<br>            ('A', 16)<br>        ('$', 30)<br>            ('C', 14)<br>    ('$', 55)<br>            ('Z', 13)<br>        ('$', 25)<br>            ('O', 12)<br>('$', 94)<br>        ('N', 22)<br>    ('$', 39)<br>            ('I', 9)<br>        ('$', 17)<br>            ('T', 8)<br>Codarile literelor:<br>A:111<br>C:110<br>Z:101<br>O:100<br>N:01<br>I:001<br>T:000<br><br>b)Care este codarea cuvantului: CANONIZAT<br>['1000001010101001101111000', '0101110100001001101111000', '1101110110001001101111000', '0001110110111001101111000']<br>Solutia: 1101110110001001101111000<br><br>c) Decodati daca se poate:<br>Se parcurge arborele Huffman dupa "directiile" indicate de codare.<br>Daca urmand sirul nu ajungem la o litera din arbore, atunci sirul nu este o codare valida.<br>00110110010011000011101: IZOOCTAN<br>11100000000110111101000: ATTIZANT<br>01100111011110110001000100101111: NOANANONTOZA<br><br>d)<br>Cuvinte gasite:<br>AA AAA AC ACACIA ACANA ACANT ACANTOZA ACAT ACATA ACATAT ACAN ACCIZ ACCIZA ACCIZAT ACCIZA ACI ACIA ACIN ACOI ACONIT ACONITINA ACONT ACONTA ACONTAT ACONTO ACT ACTA ACTANT ACTINIC ACTINON ACTINOT ACTIONA ACTIONAT AI AICI AN ANA ANICONIC ANIN ANINA ANINAT ANION ANIONIT ANIZOCITOZA ANTANTA ANTA ANTI ANTIC ANTIC ANTICANONIC ANTINICOTINIC ANTITANC ANTITON ANTOCIAN ANTONICA AT ATA ATAC ATACA ATACANT ATACAT ATATA ATATICA ATIC ATON ATONIC ATOT ATA ATATA ATATAT ATICA ATICA ATINTI ATINTIT AZ AZI AZOIC AZOT AZOTAT AZOTIC AZOTIT CA CACA CACAO CACIC CACO CAIA CAIAC CAIC CAINIC CAINOZOIC CANA CANAT CANAT CANA CANA CANCAN CANCI CANCIOC CANIN CANION CANIOTA CANON CANONI CANONIC CANONIC CANONICAT CANONIT CANONIZA CANONIZAT CANOTA CANT CANTATA CANTINA CANTO CANTON CANTONA CANTONA CAT CATAZONA CATION CATIONIC CATONIC CATA CATA CAZ CAZA CAZAC CAZACA CAZACINCA CAZACIOC CAZAN CAZAT CAZIC CAZINO CAZNA CAZON CA CACI CAI CAINA CAINAT CAINI CAINIT CAINTA CAIT CAITA CANI CANIT CANITA CATA CATANA CATAT CATANI CATANIT CATANITA CATINA CATINA CATAI CAZNI CAZNIT CANT CANTA CANTAT CANTIC CAT CAT CAT CI CIACONA CIAN CIANAT CIANIC CIANINA CIANIT CIANOTIC CIANOZA CIANOZAT CIANOZA CIAO CICA CICO CIN CINA CINAT CINA CINCANTIN CINCI CINIC CINTITA CINTITOI CIOACA CIOANCA CIOATA CIOATCA CIOC CIOCAN CIOCAN CIOCANI CIOCANI CIOCANIT CIOCANIT CIOCNI CIOCNIT CIOCOAICA CIOCOI CIOCOI CIONT CIONTA CIONTAT CIONTI CIONTIT CIOT CIOTCA CIOTCA CIT CITA CITAT CITI CITIT CITOZINA CO COACAZ COANA COC COC COCA COCAINA COCA COCA COCINA COCIOC COCIOC COCOANA COCON COCONI COCONIT COCONITA COCOTA COCOTA COCOTA COCOTAT COIOT COIT CON CONAC CONACI CONACIT CONCA CONCI CONCINA CONIAC CONIC CONIOZA CONITA CONT CONTA CONTACT CONTANT CONT COT COT COT COTA COTAT COTA COTI COTIT COTIZA COTIZANT COTOC COTOC COTOI COTOI COTON COTCA COTCA COZ COZONAC IA IAC IACA IACA IACA IACATA IACINT IACO IACTANT IACTANTA IAN IATAC IATA IAZ IC ICI ICNI ICOANA ICON ICONIC ICONITA IN IN INC INCA INCINTA INCITA INCITANT INCITAT INCIZA INCIZAT INCIZA INCOT INIC INION INITIO INITA INITIA INITIAT INITIATIC INTACT INTONA INTONAT IO IOANIT IOC ION IONATAN IONATAN IONIAN IONIC IONIT IONIZA IONIZANT IONIZAT IOT IOTA IOTACIZA IOTACIZAT IOTA IT ITAN ITA ITI ITII ITIT IZ IZINI IZINIT IZOOCTAN IZOTONIC II IN INAINTA INAINTAT INCAI INCA INCAINA INCAINI INCAINIT INCANTA INCANTAT INCAT INCINCI INCINCIT INCOA INCOT INNOI INNOIT INOT INOTA INOTAT INTAI INTINA INTINA INTINAT INTONA INTONAT INTINA INTINAT INTOTONA INTOTONAT NA NAI NAICA NAN NAT NAZ NACAZ NATANTOC NAZATIC NI NICI NICICAT NICOTINA NICOTINIC NICOTINIZAT NIT NIT NIZNAI NO NOATIN NOI NOIAN NOIAN NOITA NON NONA NOTA NOTAT NOTA NOTATITA NOTITA OA OAC OACACA OAZA OCA OCAZIONA OCAZIONAT OCA OCAI OCAIT OCINA OCITOCIC OCITOCINA OCNA OCNITA OCNITA OCTAN OCTANIC OCTANT OCTOIC OCTOIC OI OINA OITA OITICA ON ONANAI ONANAI ONANAIT ONTIC OOCIT OT OTAC OTAC OTIC OTICNI OTINC OTITA OZON OZONA OZONAT OZONIZA OZONIZAT TA TAC TACIT TACT TACTA TACTAT TACTIC TACTICA TACTICIAN TAICA TAIN TAINA TAINIC TAINITA TANANA TANANICA TANANICA TANANT TANAT TANATIC TANAT TANC TANIC TANIN TANIZA TANIZAT TANTI TANZANIAN TATA TATONA TATONANT TATONAT TACAI TAIA TAIAT TATAIT TATAN TATIC TATICA TATITA TACAI TANT TIC TICAI TICAI TICAIT TICAIT TICNA TICNI TICNIT TII TIII TINA TIO TIOCIANAT TITAN TITANIC TITANIT TIZ TIZANA TIZIC TOACA TOANA TOANCA TOC TOCA TOCANA TOCAT TOCA TOCANI TOCANIT TOCANITA TOCI TOCI TOCIT TOI TON TON TONA TONIC TONICA TONT TOT TOT TT TA TAC TAICA TANC TATA TACANI TACANI TACANIT TACANIT TATICA TANC TATACA TATACAI TATA TATAI TATAIT TATANA TI TICA TICNI TICNIT TINC TINC TINTAT TINTA TINTI TINTIT TIT TOC TOCAI TOCAIT TOCAIT TOI TOI ZA ZAICA ZAICOI ZANANA ZAT ZAITIN ZANAT ZANATIC ZATICNI ZATICNIT ZATOACA ZATON ZATONI ZATONIT ZANA ZAT ZAZAI ZAZAIT ZI ZINC ZINCA ZINCAT ZOANA ZOIZIT ZONA ZONA ZONITA ZOO ZOONOZA <br></pre><br><pre id="27" onclick="afisare(27)"><br><br>Problem39<br>Lista simplu inlantuita este:<br><br>0:  66<br>1: <br>2:  35<br>3: <br>4: <br>5:  71<br>6:  72<br>7:  29<br>8: <br>9: <br>10: <br><br>linear probing:<br>0 :  <br>1 : 35<br>2 :  <br>3 : 71<br>4 : 72<br>5 :  <br>6 :  <br>7 :  <br>8 :  <br>9 :  <br>10 :  <br>11 :  <br>12 : 29<br>13 :  <br>14 :  <br>15 : 66<br>16 :  <br><br><br>quadratic probing:<br>0 :  <br>1 :  <br>2 :  <br>3 : 66<br>4 :  <br>5 : 35<br>6 :  <br>7 :  <br>8 : 71<br>9 : 72<br>10 : 29<br><br><br>double hashing:<br>0 :  <br>1 :  <br>2 :  <br>3 :  <br>4 :  <br>5 :  <br>6 :  <br>7 :  <br>8 :  <br>9 : 66<br>10 : 29<br>11 :  <br>12 :  <br>13 :  <br>14 : 71<br>15 : 72<br>16 : 35<br><br><br><br></pre><br><pre id="28" onclick="afisare(28)"><br><br>Problem40<br>Ideea de rezolvare:<br>Se primeste un hash si se testeaza o secventa de liste, astfel incat ordinea<br>in care ar fi putut fi inserate elemntele in hash sa poata genera o lista identica cu hash-ul.<br>Prin adresare elementele sunt puse intr-un tablou alocat static pe pozitiile cheilor lor, astfel incat<br>un element cu cheia k va fi memorat in locatia k.<br>Rezultat:[18, 5, 4, 3, 14, 19, 15, 12, 7, 6]<br></pre><br><pre id="29" onclick="afisare(29)"><br><br>Problem41<br>Idee de implemetare:<br>Algorimul lui Prim foloseste un min-Heap in care pune muchiile in functie de cost.<br>La primul pas considera nodul de start ca fiind solutia, adica arborele partial de cost minim.<br>Pentru a adauga noduri in arbore adaugam vecinii nodului de start intr-un heap in functie de cosul muchiei.<br>Ca sa adaugam muchia cu costul cel mai mic vom decapita heapul pentru a obtine muchia minima adiacenta la solutie.<br>Acum consideram solutia formata din cele doua noduri si punem in heap vecinii celui de-al doilea nod.<br>Repetam algoritmul pana cand vizitam toate nodurile din graf.<br>La final vom obtine arborele partial de cost minim.<br>Algoritm:<br>La pasul 1 am scos din heap (0, (0, -1)). Dupa stergere, heapul este: []<br><br>La pasul 2 am scos din heap (9, (2, 0)). Dupa stergere, heapul este: [(9, (4, 0))]<br><br>La pasul 3 am scos din heap (5, (5, 2)). Dupa stergere, heapul este: [(6, (4, 2)), (9, (0, 2)), (9, (3, 2)), (9, (4, 0))]<br><br>La pasul 4 am scos din heap (5, (2, 5)). Dupa stergere, heapul este: [(6, (4, 2)), (9, (0, 2)), (9, (3, 2)), (9, (4, 0)), (12, (1, 5))]<br><br>La pasul 5 am scos din heap (6, (4, 2)). Dupa stergere, heapul este: [(9, (0, 2)), (9, (4, 0)), (9, (3, 2)), (12, (1, 5))]<br><br>La pasul 6 am scos din heap (6, (2, 4)). Dupa stergere, heapul este: [(9, (0, 2)), (9, (0, 4)), (9, (3, 2)), (12, (1, 5)), (9, (4, 0))]<br><br>La pasul 7 am scos din heap (9, (0, 2)). Dupa stergere, heapul este: [(9, (0, 4)), (9, (4, 0)), (9, (3, 2)), (12, (1, 5))]<br><br>La pasul 8 am scos din heap (9, (0, 4)). Dupa stergere, heapul este: [(9, (3, 2)), (9, (4, 0)), (12, (1, 5))]<br><br>La pasul 9 am scos din heap (9, (3, 2)). Dupa stergere, heapul este: [(9, (4, 0)), (12, (1, 5))]<br><br>La pasul 10 am scos din heap (9, (2, 3)). Dupa stergere, heapul este: [(9, (4, 0)), (12, (1, 5))]<br><br>La pasul 11 am scos din heap (9, (4, 0)). Dupa stergere, heapul este: [(12, (1, 5))]<br><br>La pasul 12 am scos din heap (12, (1, 5)). Dupa stergere, heapul este: []<br><br>La pasul 13 am scos din heap (12, (5, 1)). Dupa stergere, heapul este: []<br><br><br>################################################################################<br>Rezultat:<br>Arborele partial reprezentat prin vectorul de tati este:<br>[-1, 5, 0, 2, 2, 2]<img src="/static/solutii/Lab212/ArboreProblem41Var5.png"><br></pre><br><pre id="30" onclick="afisare(30)"><br><br>Problem42<br>Idee de rezolvare: <br>Pas 1: Sortam muchiile crescator in functie de cost;<br>pas 2: Alegem cea mai mica muchie. Verificam daca inchide un ciclu cu arborele<br>format pana acum. Daca nu inchide un ciclu, includem muchia in arborele de cost minim;<br>Pas 3: Repetam pasul 2 pana cand numarul muchiilor din arbore este cu unu mai putin decat numarul de noduri.<br><br>Muchiile arborelui de cost minim obtinut sunt urmatoarele:<br>2 -- 7 == 1<br>1 -- 8 == 4<br>3 -- 7 == 8<br>4 -- 8 == 8<br>1 -- 2 == 11<br>3 -- 6 == 18<br>2 -- 5 == 19<br>0 -- 2 == 27<br><img src="/static/solutii/Lab212/APMProblem42Var5.png"><br></pre><br><pre id="31" onclick="afisare(31)"><br><br>Problem43<br><br>Idee de rezolvare:<br>Construim un dictionar pentru distante si atribuim infinit tuturor nodurilor, cu exceptia nodului de start, care va primi 0<br>Construim un heap in care adaugam initial nodul de start cu distanta 0. <br>Calculam distantele de la nodul de start la toti vecinii sai, pe care ii adaugam in heap, cu distantele respective.<br>Extragem din heap nodul cu distanta cea mai mica si verificam daca distantele de la nodul de start prin<br>acest nod sunt mai mici decat ceea ce aveam deja, caz in care actualizam dictionarul de distante si adaugam<br>in heap nodurile si distantele corespunzatoare.<br>Repetam ultimul pas cat timp heap-ul e nevid<br><br>Extragem din heap 0 A<br>Adaugam in heap 8 C<br>Actualizam distantele: {'A': 0, 'B': inf, 'C': 8, 'D': inf, 'E': inf}<br>Extragem din heap 8 C<br>Adaugam in heap 20 B<br>Actualizam distantele: {'A': 0, 'B': 20, 'C': 8, 'D': inf, 'E': inf}<br>Extragem din heap 20 B<br>Adaugam in heap 21 D<br>Actualizam distantele: {'A': 0, 'B': 20, 'C': 8, 'D': 21, 'E': inf}<br>Adaugam in heap 26 E<br>Actualizam distantele: {'A': 0, 'B': 20, 'C': 8, 'D': 21, 'E': 26}<br>Extragem din heap 21 D<br>Extragem din heap 26 E<br>Distanta minima de la nodul A catre oricare alt nod din graf este: <br>{'A': 0, 'B': 20, 'C': 8, 'D': 21, 'E': 26}<br>Nodul anterior fiecarui nod este:<br>{'A': 'A', 'B': 'C', 'C': 'A', 'D': 'B', 'E': 'B'}<img src="/static/solutii/Lab212/graf43Problem43Var5.png"><br></pre>