<pre id="0" onclick="afisare(0)"><br><br>Problem1<br><br>    Creeam cele trei structuri de date in ordine: stiva coada stiva.<br>Stiva1:|__________|<br>Coada:|__________|<br>Stiva2:|__________|<br><br>   Efectuam sirul de operatii: <br>M ̲c a ̲c r ̲c i ̲c u ̲c s ̲c v ̲c  ̲1  ̲2 a ̲c  ̲1  ̲2 c ̲c  ̲1  ̲2 a ̲c  ̲1  ̲2 n ̲c  ̲1  ̲2 t ̲c  ̲1  ̲2 a ̲c  ̲1  ̲2 a ̲c  ̲1 r ̲c  ̲1 e ̲c  ̲1 <br><br>   Obtinem: <br>Stiva1: M    a    r    i    u    s    v̶    a̶    c̶    a̶    n̶    t̶    a̶    a̶    r̶    e̶<br>Coada:  v̶    a̶    c̶    a̶    n̶    t̶    a̶    a    r    e<br>Stiva2: v    a    c    a    n    t    a<br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br>Operatiile folosite sunt: <br>[numar(63), numar(99), numar(74), numar(74), numar(11), numar(40), p, p, p, p, p, numar(13), p, numar(22), p, numar(61), p, numar(27), p, numar(97), p, numar(30), p, numar(95), p, p]<br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br> Avand elementele 7 intr-o stiva (7 este ultimul el. inserat), gasiti o succesiune de mutari a.i. sa stergeti el. 7 din stiva avand la dispozitie 2 cozi si operatiile:<br>P -> se extrage un el. din stiva, se introduce in prima coada<br>S -> se sterge un el. din stiva<br>1 -> se extrage un el. din coada 1 se introduce in coada 2<br>2 -> se extrage un el. din coada 2 se introduce in coada 1<br>I_1 -> se extrage un el din coada 1 si se introduce in stiva<br>I_2 -> se extrage un el din coada 2 si se introduce in stiva<br><br>-------- Rezolvare --------<br><br>Avem initial:<br>	Stiva		7 (varf)<br>	Coada 1		Coada este goala.<br><br>	Coada 2		Coada este goala.<br><br>___________________________________________<br><br>Elementul de scos se afla in varful stivei,deci vom aplica operatia S 7<br><br>	Stiva		Stiva este goala.<br><br>	Coada 1		Coada este goala.<br><br>	Coada 2		Coada este goala.<br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>  <br>Introducem elementele: [4, 6, 7, 2, 8, 3, 1] intr-un arbore binar de cautare. <br>Radacina va fi: 4<br><br>Vectorul de tati este: [-1, 2, 4, 2, 0, -1, 4, 6, 7, -1]<br>Vectorul de nivel este: [-1, 2, 1, 2, 0, -1, 1, 2, 3, -1]<br><br>Verificam in vectorul de tati ce noduri pot fi sterse in 2 moduri (cele care au 2 fii).<br>Nodurile care se pot sterge in doua moduri sunt: <br>2 deoarece are 2 fii<br>4 deoarece are 2 fii<br><br>Arborele initial este:<br><br><br>                              8<br>                    7<br>          6<br>4<br>                    3<br>          2<br>                    1<br><br>Arborele final, dupa stergerea elementului 7 este:<br><br><br>                    8<br>          6<br>4<br>                    3<br>          2<br>                    1<br><br><br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem8<br>Subpuctul a)<br>INSERTION SORT: <br><br>PASUL 1:<br>[10, 14, 56, 27, 68, 86]<br>[10, 14, 56, 27, 68, 86]<br><br>PASUL 2:<br>[10, 14, 56, 27, 68, 86]<br><br>PASUL 3:<br>[10, 14, 27, 56, 68, 86]<br>[10, 14, 27, 56, 68, 86]<br><br>BUBBLE SORT: <br><br>PASUL 1:<br>[10, 14, 27, 56, 68, 86]<br>PASUL 2:<br>[10, 14, 27, 56, 68, 86]<br>PASUL 3:<br>[10, 14, 27, 56, 68, 86]<br>PASUL 4:<br>[10, 14, 27, 56, 68, 86]<br>Subpunctul b)<br>SELECTIA MAXIMULUI:<br> PASUL 1:<br>[14, 10, 56, 27, 68, 86]:<br> PASUL 2:<br>[14, 10, 56, 27, 68, 86]:<br> PASUL 3:<br>[14, 10, 56, 27, 68, 86]:<br>SELECTIA MINIMULUI:<br><br> PASUL 1:<br>[10, 14, 56, 27, 68, 86]<br> PASUL 2:<br>[10, 14, 56, 27, 68, 86]<br>Subpunctul c)<br><br>Pivot: 10<br>[10, 14, 56, 27, 68, 86]<br><br>Pivot: 68<br>[10, 14, 56, 27, 68, 86]<br><br>Pivot: 14<br>[10, 14, 56, 27, 68, 86]<br><br>Pivot: 27<br>[10, 14, 27, 56, 68, 86]<br><br>Folosim partitionarea Hoare<br><br>Subpunctul d)<br>INSERTION SORT:<br>PASUL 1:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 2:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 3:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 4:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 5:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 6:<br>[10, 14, 27, 56, 68, 86]<br><br>SELECTION SORT: <br><br>PASUL 1:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 2:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 3:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 4:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 5:<br>[10, 14, 27, 56, 68, 86]<br><br>PASUL 6:<br>[10, 14, 27, 56, 68, 86]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem9<br>nesortat = 5, 1, 89, 94, 79, 72, 42, 53, 14<br>sortat = 1, 5, 14, 42, 53, 72, 79, 89, 94<br><br>Vectorul a rezultat in urma aplicarii a 4 pasi din Selection Sort (maxim) ?<br>Fals, deoarece dupa aplicarea a 4 pasi din selection sort (maxim) cele mai mari 4 numere s-ar fi aflat la finalul vectorului, insa nu s-a intamplat acest lucru<br><br>Vectorul a rezultat in urma aplicarii a 3 pasi din Insertion Sort ?<br>Fals, deoarece nici primii si nici ultimii 4 termeni ai vectorului NU sunt sortati !<br><br>Verificati daca vectorul a rezultat in urma unei partitionari folosind pivotul 42 !<br>Aflam pozitia pe care se afla pivotul: 6<br>Verificam daca elementele din stanga sunt mai mici decat pivotul, iar cele din dreapta, mai mari. <br>Vectorul nu a rezultat in urma unei partitionari folosind pivotul 42<br><br>Sortare cu Bubble Sort:<br>Sirul este: 5, 1, 89, 94, 79, 72, 42, 53, 14<br>Dupa parcurgere sirul este: 1, 5, 89, 79, 72, 42, 53, 14, 94<br>Dupa parcurgere sirul este: 1, 5, 79, 72, 42, 53, 14, 89, 94<br>Dupa parcurgere sirul este: 1, 5, 72, 42, 53, 14, 79, 89, 94<br>Dupa parcurgere sirul este: 1, 5, 42, 53, 14, 72, 79, 89, 94<br>Dupa parcurgere sirul este: 1, 5, 42, 14, 53, 72, 79, 89, 94<br>Dupa parcurgere sirul este: 1, 5, 14, 42, 53, 72, 79, 89, 94<br>Dupa parcurgere sirul este: 1, 5, 14, 42, 53, 72, 79, 89, 94<br>La aceasta parcurgere nu se face nici o inversare !<br>Sirul este sortat !<br>v = 1, 5, 14, 42, 53, 72, 79, 89, 94<br><br>Sortare cu Selection Sort (maxim):<br>Sirul este: 5, 1, 89, 94, 79, 72, 42, 53, 14<br>Parcurgem sirul pana la elementul 14 si interschimbam 14 cu 94 .<br>Sirul este: 5, 1, 89, 14, 79, 72, 42, 53, 94<br>Parcurgem sirul pana la elementul 53 si interschimbam 53 cu 89 .<br>Sirul este: 5, 1, 53, 14, 79, 72, 42, 89, 94<br>Parcurgem sirul pana la elementul 42 si interschimbam 42 cu 79 .<br>Sirul este: 5, 1, 53, 14, 42, 72, 79, 89, 94<br>Parcurgem sirul pana la elementul 72 si nu se face nicio interschimbare . <br>Sirul este: 5, 1, 53, 14, 42, 72, 79, 89, 94<br>Parcurgem sirul pana la elementul 42 si interschimbam 42 cu 53 .<br>Sirul este: 5, 1, 42, 14, 53, 72, 79, 89, 94<br>Parcurgem sirul pana la elementul 14 si interschimbam 14 cu 42 .<br>Sirul este: 5, 1, 14, 42, 53, 72, 79, 89, 94<br>Parcurgem sirul pana la elementul 14 si nu se face nicio interschimbare . <br>Sirul este: 5, 1, 14, 42, 53, 72, 79, 89, 94<br>Parcurgem sirul pana la elementul 1 si interschimbam 1 cu 5 .<br>Sirul este sortat !<br>v = 1, 5, 14, 42, 53, 72, 79, 89, 94<br><br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem10<br><br>Generam toate combinarile posibile cu elementele vectorului,pana cand am rezolvat toate cerintele. Pentru fiecare combinare generata sterg din vector respectivele elemente si verific daca satisface vreuna din cerinte.<br> <br>---Numarul minim de elemente care trebuiesc sterse pt ca vectorul sa fie rezultatul a 2 pasi de sortare prin insertie directa este 0<br>   Vectorul rezultat dupa stergeri este [21, 55, 57, 15, 51, 43, 13, 39]<br>   CONDITIA INDEPLINITA: primele 3 elemente din vector sunt sortate crescator<br>---Pentru a satisface 1 pasi de sortare prin selectia maximului, numarul minim de elemente care trebuiesc sterse este 4 ({57, 51, 43, 55}).<br>   Vectorul rezultat dupa stergeri este [21, 15, 13, 39]<br>   CONDITIA INDEPLINITA: pe ultimele 1 pozitii se afla cele mai mari elemente din vector, sortate crescator<br>---Pentru a satisface 3 pasi de sortare prin selectia minumului, numarul minim de elemente care trebuiesc sterse este 5 ({39, 43, 13, 15, 51}).<br>   Vectorul rezultat dupa stergeri este [21, 55, 57]<br>   CONDITIA INDEPLINITA: pe primele 3 pozitii se afla cele mai mici elemente din vector, sortate crescator<br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem11<br>O partitionare a vectorului este:<br>[0, 3, 3, 10, 6, 12, 64, 46, 13]<br><br><br>Pivotul este : 12<br>Vrem ca pivotul sa se afle pe ultima pozitie in sir<br>Daca nu se afla pe ultima pozitie atunci il interschimbam cu elementul aflat pe pozitia respectiva<br>Dupa interschimbarea pivotului sirul devine : [0, 64, 46, 3, 3, 13, 10, 6, 12]<br><br>Vom calcula pozitia unde trebuie sa stea pivotul,crescand indicele si efectuand interschimbari a.i. elementele mai mici sau egale sa fie in stanga sa.<br>La sfarsit pivotul va fi mutat pe pozitia corespunzatoare.<br>Pozitia pivotului este initial -1 dar va deveni cel putin 0 pe parcursul algoritmului.<br><br>Pasul 1 : Elementul 0 este mai mic decat pivotul ---> se interschimba 0 cu 0 iar pozitia pivotului devine 0<br>Vectorul la aces pas al algoritmului este : [0, 64, 46, 3, 3, 13, 10, 6, 12]<br><br>Pasul 2 : Elementul 64 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [0, 64, 46, 3, 3, 13, 10, 6, 12]<br><br>Pasul 3 : Elementul 46 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [0, 64, 46, 3, 3, 13, 10, 6, 12]<br><br>Pasul 4 : Elementul 3 este mai mic decat pivotul ---> se interschimba 3 cu 64 iar pozitia pivotului devine 1<br>Vectorul la aces pas al algoritmului este : [0, 3, 46, 64, 3, 13, 10, 6, 12]<br><br>Pasul 5 : Elementul 3 este mai mic decat pivotul ---> se interschimba 3 cu 46 iar pozitia pivotului devine 2<br>Vectorul la aces pas al algoritmului este : [0, 3, 3, 64, 46, 13, 10, 6, 12]<br><br>Pasul 6 : Elementul 13 este mai mare decat pivotul ---> vectorul si pozitia pivotului raman aceleasi<br>Vectorul la aces pas al algoritmului este : [0, 3, 3, 64, 46, 13, 10, 6, 12]<br><br>Pasul 7 : Elementul 10 este mai mic decat pivotul ---> se interschimba 10 cu 64 iar pozitia pivotului devine 3<br>Vectorul la aces pas al algoritmului este : [0, 3, 3, 10, 46, 13, 64, 6, 12]<br><br>Pasul 8 : Elementul 6 este mai mic decat pivotul ---> se interschimba 6 cu 46 iar pozitia pivotului devine 4<br>Vectorul la aces pas al algoritmului este : [0, 3, 3, 10, 6, 13, 64, 46, 12]<br><br>Pasul 9 : Elementul 12 este egal cu pivotul ---> se interschimba 12 cu 13 iar pozitia pivotului devine 5<br>Vectorul la aces pas al algoritmului este : [0, 3, 3, 10, 6, 12, 64, 46, 13]<br><br><br><br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem12<br><br>Reconstruim arborele plecand de la parcurgerea data<br>Pentru fiecare nou voi afisa fii lui<br>8<br>|---------2<br>|---------3<br><br>3<br>|---------1<br>|---------6<br>|---------7<br>|---------9<br><br>7<br>|---------5<br><br>2<br>|---------4<br>|---------10<br><br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problema13<br><br>Radacina arborelui este 10<br>Parcurgerea in inordine (SRD) a arborelui este: [3, 4, 7, 10, 11, 14, 16]<br><br>Arborele reconstruit din SDR+SRD este: <br><br>                              16<br>                    14<br>          11<br>10<br>                              7<br>                    4<br>          3<br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem14<br><br>pentru a:[2, 7, 20, 11, 16, 18, 17, 14, 5, 19] afiseaza: NU, deoarece, 11 < 19, iar 11 este pe pozitia 3, cand ar fi trebuit sa fie pozitionat inainte de 20 care se afla pe pozitia 2.<br>pentru b:[2, 5, 10, 9, 7, 13, 18, 16, 14, 12] afiseaza: DA<br><br>Arborele este:<br><br><br>                              18<br>                    16<br>          14<br>                    13<br>12<br>                              10<br>                    9<br>          7<br>                    5<br>                              2<br><br>pentru c:[5, 2, 8, 7, 6, 11, 18, 13, 10, 9] afiseaza: DA<br><br>Arborele este:<br><br><br>                              18<br>                    13<br>                              11<br>          10<br>9<br>                              8<br>                    7<br>          6<br>                              5<br>                    2<br><br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem15<br>0. Numerele sortate: [5, 20, 42, 90, 94]<br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem17<br>Cautam elementul de pe pozitia 3.<br>Aplicam quick sort modificat.<br><br> Am ales random pivotul: 7<br> Vectorul dupa partitionarea cu pivotul 7 arata asa: <br>[7, 67, 98, 47, 89, 34, 56, 46, 76, 8, 87, 63, 30]<br><br> Am ales random pivotul: 98<br> Vectorul dupa partitionarea cu pivotul 98 arata asa: <br>[7, 67, 30, 47, 89, 34, 56, 46, 76, 8, 87, 63, 98]<br><br> Am ales random pivotul: 56<br> Vectorul dupa partitionarea cu pivotul 56 arata asa: <br>[7, 8, 30, 47, 46, 34, 56, 89, 76, 67, 87, 63, 98]<br><br> Am ales random pivotul: 47<br> Vectorul dupa partitionarea cu pivotul 47 arata asa: <br>[7, 8, 30, 34, 46, 47, 56, 89, 76, 67, 87, 63, 98]<br><br> Am ales random pivotul: 46<br> Vectorul dupa partitionarea cu pivotul 46 arata asa: <br>[7, 8, 30, 34, 46, 47, 56, 89, 76, 67, 87, 63, 98]<br><br> Am ales random pivotul: 30<br> Vectorul dupa partitionarea cu pivotul 30 arata asa: <br>[7, 8, 30, 34, 46, 47, 56, 89, 76, 67, 87, 63, 98]<br>Am gasit elementul de pe pozitia 3, acesta este 30.<br> <br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem24<br>Idee de rezolvare: Cream un MIN_heap. Avem radacina a + b * sqrt(k) si inseram in heap numerele (a + 1) + b * sqrt(k) si a + (b + 1) * sqrt(k). <br>Dupa fiecare inserare reechilibram heap-ul. Afisam radacina, decapitam heap-ul si il reechilibram.<br><br>Heap:  ( 0 , 0 ) ,  ( 1 , 0 ) ,  ( 0 , 1 ) <br>Primul element este: 0<br><br>Heap:  ( 1 , 0 ) ,  ( 0 , 1 ) ,  ( 2 , 0 ) ,  ( 1 , 1 ) <br>Al 2-lea element este: 1 + 0 * sqrt(5) = 1.0 <br><br>Heap:  ( 2 , 0 ) ,  ( 0 , 1 ) ,  ( 1 , 1 ) ,  ( 3 , 0 ) ,  ( 2 , 1 ) <br>Al 3-lea element este: 2 + 0 * sqrt(5) = 2.0 <br><br>Heap:  ( 0 , 1 ) ,  ( 3 , 0 ) ,  ( 1 , 1 ) ,  ( 2 , 1 ) ,  ( 0 , 2 ) <br>Al 4-lea element este: 0 + 1 * sqrt(5) = 2.23606797749979 <br><br>Heap:  ( 3 , 0 ) ,  ( 4 , 0 ) ,  ( 1 , 1 ) ,  ( 0 , 2 ) ,  ( 2 , 1 ) ,  ( 3 , 1 ) <br>Al 5-lea element este: 3 + 0 * sqrt(5) = 3.0 <br><br>Heap:  ( 1 , 1 ) ,  ( 4 , 0 ) ,  ( 3 , 1 ) ,  ( 0 , 2 ) ,  ( 2 , 1 ) ,  ( 1 , 2 ) <br>Al 6-lea element este: 1 + 1 * sqrt(5) = 3.23606797749979 <br><br>Heap:  ( 4 , 0 ) ,  ( 2 , 1 ) ,  ( 5 , 0 ) ,  ( 0 , 2 ) ,  ( 1 , 2 ) ,  ( 3 , 1 ) ,  ( 4 , 1 ) <br>Al 7-lea element este: 4 + 0 * sqrt(5) = 4.0 <br><br>Heap:  ( 2 , 1 ) ,  ( 0 , 2 ) ,  ( 5 , 0 ) ,  ( 4 , 1 ) ,  ( 1 , 2 ) ,  ( 3 , 1 ) ,  ( 2 , 2 ) <br>Al 8-lea element este: 2 + 1 * sqrt(5) = 4.23606797749979 <br><br>Heap:  ( 0 , 2 ) ,  ( 1 , 2 ) ,  ( 5 , 0 ) ,  ( 4 , 1 ) ,  ( 2 , 2 ) ,  ( 3 , 1 ) ,  ( 0 , 3 ) <br>Al 9-lea element este: 0 + 2 * sqrt(5) = 4.47213595499958 <br><br>Heap:  ( 5 , 0 ) ,  ( 1 , 2 ) ,  ( 3 , 1 ) ,  ( 4 , 1 ) ,  ( 2 , 2 ) ,  ( 0 , 3 ) ,  ( 6 , 0 ) ,  ( 5 , 1 ) <br>Al 10-lea element este: 5 + 0 * sqrt(5) = 5.0 <br><br>Heap:  ( 3 , 1 ) ,  ( 1 , 2 ) ,  ( 6 , 0 ) ,  ( 4 , 1 ) ,  ( 2 , 2 ) ,  ( 0 , 3 ) ,  ( 5 , 1 ) ,  ( 3 , 2 ) <br>Al 11-lea element este: 3 + 1 * sqrt(5) = 5.23606797749979 <br><br>Heap:  ( 1 , 2 ) ,  ( 4 , 1 ) ,  ( 6 , 0 ) ,  ( 3 , 2 ) ,  ( 2 , 2 ) ,  ( 0 , 3 ) ,  ( 5 , 1 ) ,  ( 1 , 3 ) <br>Al 12-lea element este: 1 + 2 * sqrt(5) = 5.47213595499958 <br><br>Heap:  ( 6 , 0 ) ,  ( 4 , 1 ) ,  ( 0 , 3 ) ,  ( 7 , 0 ) ,  ( 2 , 2 ) ,  ( 1 , 3 ) ,  ( 5 , 1 ) ,  ( 3 , 2 ) ,  ( 6 , 1 ) <br>Al 13-lea element este: 6 + 0 * sqrt(5) = 6.0 <br><br>Heap:  ( 4 , 1 ) ,  ( 2 , 2 ) ,  ( 0 , 3 ) ,  ( 7 , 0 ) ,  ( 6 , 1 ) ,  ( 1 , 3 ) ,  ( 5 , 1 ) ,  ( 3 , 2 ) ,  ( 4 , 2 ) <br>Al 14-lea element este: 4 + 1 * sqrt(5) = 6.23606797749979 <br><br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem28<br>	Cream heap-urile: <br><br>Vectorul initial: [8, 13, 42, 25, 28, 0]<br>Min heap: [25, 42, 28]<br>  25<br>42  28<br>Max heap: [13, 8]<br>  13<br>8<br>Mediana 1 este: 25<br><br>Vectorul initial: [8, 13, 42, 25, 28, 0, 37, 14, 19, 16, 35, 12, 6, 47, 32, 33, 45, 0]<br>Min heap: [28, 32, 37, 33, 35, 42, 47, 45]<br>              28<br>      32              37<br>  33      35      42      47<br>45<br>Max heap: [25, 19, 16, 14, 6, 12, 13, 8]<br>              25<br>      19              16<br>  14      6      12      13<br>8<br>Mediana 2 este: 26.5<br><br>Vectorul initial: [8, 13, 42, 25, 28, 0, 37, 14, 19, 16, 35, 12, 6, 47, 32, 33, 45, 0, 43, 0]<br>Min heap: [28, 32, 37, 33, 35, 42, 47, 45, 43]<br>              28<br>      32              37<br>  33      35      42      47<br>45  43<br>Max heap: [25, 19, 16, 14, 6, 12, 13, 8]<br>              25<br>      19              16<br>  14      6      12      13<br>8<br>Mediana 3 este: 28<br><br><br></pre><br><pre id="15" onclick="afisare(15)"><br><br>Problem29<br><br>4, 15, 45, 63, 83<br><br></pre>