<pre id="0" onclick="afisare(0)">
Problem2<br><br><br>Idee de rezolvare:<br><br>Initial, avem doua liste: shuffled_data si data. Trebuie sa ordonam elementele din shuffled_data in ordinea pe care o au in data. Pentru simplitate, prima coada va fi numita in continuare Q1, iar a doua coada Q2. Introducem elementele din shuffled_data in Q1, si parcurgem lista data cu un contor, verificand la fiecare pas daca elementul curent din data este egal cu front-ul lui Q1; daca da, il eliminam din Q1 si il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, il eliminam din Q1 si il adaugam in Q2, la final. Repetam aceeasi pasi pentru Q2: comparam front-ul lui Q2 cu elementul curent din data, daca sunt egale, scoatem elementul din Q2, il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, scoatem elementul din Q2 si il adaugam la final in Q1. Pentru optimizare, putem incepe algoritmul dupa adaugarea primului element in coada Q1, nu este nevoie sa adaugam intai toate elementele pentru ca algoritmul sa functioneze, insa avem nevoie de verificari suplimentare pentru a nu adauga/sterge elemente inexistente(nule) din cozi.<br><br>Secventa finala este: j 1 f 1 w 1 d I_1 p 1 t 1 i 1 v 1 g 1 2 1 2 I_2 1 2 1 2 1 2 I_2 1 2 I_2 I_1 2 1 2 I_2 I_1 I_2 I_2 <br><strike>j</strike> <strike>f</strike> <strike>w</strike> <strike>d</strike> <strike>p</strike> <strike>t</strike> <strike>i</strike> <strike>v</strike> <strike>g</strike> <strike>j</strike> <strike>f</strike> <strike>p</strike> <strike>t</strike> <strike>i</strike> <strike>g</strike> <strike>f</strike> <strike>p</strike> <br><strike>j</strike> <strike>f</strike> <strike>w</strike> <strike>p</strike> <strike>t</strike> <strike>i</strike> <strike>v</strike> <strike>g</strike> <strike>j</strike> <strike>f</strike> <strike>p</strike> <strike>t</strike> <strike>i</strike> <strike>f</strike> <br></pre><pre id="1" onclick="afisare(1)">
Problem3<br>Idee de rezolvare: Selectam primul element din vectorul b. Luam fiecare element din vectorul a si il introducem in stiva.<br>Cat timp stiva nu este goala si ultimul element din stiva este egal cu elementul curent din b, atunci il scoatem, afisam p si trecem mai departe in b.<br>	Adaugam 5 la operatii si adaugam elementul 5 in stiva<br><table border=1><tr><td>5</td></tr></table><br>	Adaugam 2 la operatii si adaugam elementul 2 in stiva<br><table border=1><tr><td>5</td><td>2</td></tr></table><br>	Adaugam 3 la operatii si adaugam elementul 3 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td></tr></table><br>	Adaugam 1 la operatii si adaugam elementul 1 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td></tr></table><br>	Adaugam 4 la operatii si adaugam elementul 4 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>4</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 4 din stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td><strike>4</strike> </td></tr></table><br>	Adaugam 7 la operatii si adaugam elementul 7 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>7</td></tr></table><br>	Adaugam 8 la operatii si adaugam elementul 8 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>7</td><td>8</td></tr></table><br>	Adaugam 6 la operatii si adaugam elementul 6 in stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>7</td><td>8</td><td>6</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 6 din stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>7</td><td>8</td><td><strike>6</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 8 din stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td>7</td><td><strike>8</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 7 din stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td>1</td><td><strike>7</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 1 din stiva<br><table border=1><tr><td>5</td><td>2</td><td>3</td><td><strike>1</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 3 din stiva<br><table border=1><tr><td>5</td><td>2</td><td><strike>3</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 2 din stiva<br><table border=1><tr><td>5</td><td><strike>2</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 5 din stiva<br><table border=1><tr><td><strike>5</strike> </td></tr></table><br>Operatiile necesare aplicate:<br>5 2 3 1 4 p 7 8 6 p p p p p p p </pre><pre id="2" onclick="afisare(2)">
Problem4<br>Idee de rezolvare: Mutam elementele din stiva in prima coada pana la elementul cautat, pe care il  stergem. Mutam elem. din prima coada in cealalta pana cand in prima coada ramane un singur element,pe care il adaugam in stiva. Repetam procedeul pentru fiecare coada alternativ, pana cand acestea devin vide si astfel elementele sunt adaugate in ordinea corecta in stiva<br><br>Stiva este: [5, 9, 3, 10, 1, 8, 7]<br>Rezolvare: Mutam elementele din stiva in coada 1, pana gasim elementul de sters, adica 9<br>P: Mutam elementul 7 in coada 1<br>P: Mutam elementul 8 in coada 1<br>P: Mutam elementul 1 in coada 1<br>P: Mutam elementul 10 in coada 1<br>P: Mutam elementul 3 in coada 1<br>S: Stergem elementul 9 din stiva<br><br>Stiva devine: [5], prima coada devine: [7, 8, 1, 10, 3] a doua coada devine []<br><br>Mutam cate un element din coada nevida in coada vida pana cand in coada din care se face extragerea ramane un singur el.,pe care il adaugam in stiva:<br>1: Mutam din coada 1 elem. 7 in coada 2<br>1: Mutam din coada 1 elem. 8 in coada 2<br>1: Mutam din coada 1 elem. 1 in coada 2<br>1: Mutam din coada 1 elem. 10 in coada 2<br>I_1: Stergem elementul 3 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [5, 3], prima coada devine: [], a doua coada devine: [7, 8, 1, 10]<br><br>2: Mutam din coada 2 elem 7 in coada 1<br>2: Mutam din coada 2 elem 8 in coada 1<br>2: Mutam din coada 2 elem 1 in coada 1<br>I_2: Stergem elementul 10 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[5, 3, 10], prima coada devine:[7, 8, 1], a doua coada devine:[]<br>1: Mutam din coada 1 elem. 7 in coada 2<br>1: Mutam din coada 1 elem. 8 in coada 2<br>I_1: Stergem elementul 1 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [5, 3, 10, 1], prima coada devine: [], a doua coada devine: [7, 8]<br><br>2: Mutam din coada 2 elem 7 in coada 1<br>I_2: Stergem elementul 8 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[5, 3, 10, 1, 8], prima coada devine:[7], a doua coada devine:[]<br>I_1: Stergem elementul 7 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [5, 3, 10, 1, 8, 7], prima coada devine: [], a doua coada devine: []<br><br>Succesiunea operatiilor este: P, P, P, P, P, S, 1, 1, 1, 1, I_1, 2, 2, 2, I_2, 1, 1, I_1, 2, I_2, I_1<br></pre><pre id="3" onclick="afisare(3)">
Problem5<br>1. Inserati urmatoarele valori, pe rand, intr-un arbore binar de cautare: [63, 2, 60, 50, 11, 73, 33, 45, 66, 11, 63, 16, 40, 56, 9, 80, 33, 65, 37, 79, 89, 28, 5, 23, 56, 53, 55, 80, 65]<br>2. Scrieti nodurile care se pot sterge in doua moduri. <br>3. Stergeti elementul: 65<br>Idee de rezolvare: Vom insera elemente in arbore folosind o functie prin recurenta care<br>        returneaza radacina arborelui, deoarece avem nevoie de referinta. Stergerea unui element se va face <br>        in functie de caz: daca are 0, 1 sau 2 copii. In primele 2 cazuri gasim parintele, cu ajutorul <br>        functiei parent, iar apoi mutam referinta nodului parintelui la None, respectiv la copilul <br>        nodului. In al treilea caz, cautam nodul cu care nodul nostru va fi inlocuit cu ajutorul <br>        functiei minValue(care ia cel mai mic nod din dreapta), punem valoarea in nodul curent, apoi<br>        stergem nodul cu care am inlocuit. Elementele care pot fi sterse in 2 moduri sunt cele care au 2 copii,<br>        iar acestea vor fi gasite cu ajutorul functiilor children(calculeaza numarul de copii) si morechildren<br>        (gaseste nodurile care au 2 copii)<br>ELementele arborelui in inordine sunt: [5, 9, 23, 28, 16, 37, 40, 45, 33, 11, 55, 53, 56, 50, 60, 2, 65, 66, 79, 89, 80, 73, 63]<br>ELementele arborelui in preordine sunt: [63, 2, 60, 50, 11, 9, 5, 33, 16, 28, 23, 45, 40, 37, 56, 53, 55, 73, 66, 65, 80, 79, 89]<br>Elementele care se pot sterge in 2 moduri sunt: [11, 33, 50, 63, 73, 80]<br>Elementul care trebuie sters este: 65<br>Arborele, din care s-a sters 65: [63, 2, 60, 50, 11, 9, 5, 33, 16, 28, 23, 45, 40, 37, 56, 53, 55, 73, 66, 65, 80, 79, 89]</pre><pre id="4" onclick="afisare(4)">
Problem7<br>Reconstruim arborele si facem parcurgerile:<br>Parcurgerea SRD a arborelui binar creat este:[50, 45, 8, 47, 35, 25]<br>Parcurgerea RSD a arborelui binar creat este:[47, 45, 50, 8, 25, 35]<br>Parcurgerea SDR a arborelui binar creat este: [50, 8, 45, 35, 25, 47]<br></pre><pre id="5" onclick="afisare(5)">
Problem9<br>9. Solutia problemei: <br>1. A/F ca [40, 51, 60, 61, 82, 15, 49, 1, 7] rezulta din 3 pasi de Selection Sort (Maxim) : <br>51 > 40 => (FALS) <br><br> 2. A/F ca [40, 51, 60, 61, 82, 15, 49, 1, 7] rezulta din 4 pasi de Insertion Sort : <br>51 > 40<br>60 > 51<br>61 > 60<br>(ADEVARAT) <br><br>3. A/F partitionat pentru Quicksort cu pivotul 7 <br>i. Pozitia pivotului = 9<br>ii. Vf. elementele de la stanga sunt mai mici <br>40 >= 7 => (FALS) <br><br>iii. Vf elementele de la dreapta mai mari<br>4. Exemplificam Bubble sort: <br>i.Vectorul are 9 elemente <br>ii.Cat timp facem interschimbari = > nu am terminat <br>0: [40, 51, 60, 61, 82, 15, 49, 1, 7]<br>1: [40, 51, 60, 61, 15, 49, 1, 7, 82]<br>2: [40, 51, 60, 15, 49, 1, 7, 61, 82]<br>3: [40, 51, 15, 49, 1, 7, 60, 61, 82]<br>4: [40, 15, 49, 1, 7, 51, 60, 61, 82]<br>5: [15, 40, 1, 7, 49, 51, 60, 61, 82]<br>6: [15, 1, 7, 40, 49, 51, 60, 61, 82]<br>7: [1, 7, 15, 40, 49, 51, 60, 61, 82]<br><br>5.Exemplificam Selection Sort(Maxim): <br>i.Vectorul are 9 elemente <br>0: [40, 51, 60, 61, 82, 15, 49, 1, 7]<br>1: [82, 51, 60, 61, 40, 15, 49, 1, 7]<br>2: [82, 61, 60, 51, 40, 15, 49, 1, 7]<br>3: [82, 61, 60, 51, 40, 15, 49, 1, 7]<br>4: [82, 61, 60, 51, 40, 15, 49, 1, 7]<br>5: [82, 61, 60, 51, 49, 15, 40, 1, 7]<br>6: [82, 61, 60, 51, 49, 40, 15, 1, 7]<br>7: [82, 61, 60, 51, 49, 40, 15, 1, 7]<br>8: [82, 61, 60, 51, 49, 40, 15, 7, 1]<br><br></pre><pre id="6" onclick="afisare(6)">
Problem10<br>Pentru toate cazurile generam submultimi de elemente din vector pentru a cauta-o pe aceea care <br>are numarul minim de elemente pe care sa le putem sterge pentru a satisface fiecare cerinta.<br>Generarea submultimilor se face prin selectia combinarilor de n elemente luate cate nrPasi <br>corespunzator subpunctului.<br>La fiecare pas din cerinta iteram prin combinarile genrate si le alegem pe cele care au o<br>lungime corespunzatoarenumarului de pasi pe care l-a facut altgoritmul si sunt sortate<br><br>a)Selectia maximului.<br><br>Pentru selectia maximului am gasit 16 subseturi de lungime 3 : [2, 6, 8] [2, 6, 7] [2, 4, 5] [2, 4, 8] [2, 4, 7] [2, 5, 8] [2, 5, 7] [0, 6, 8] [0, 6, 7] [0, 4, 5] [0, 4, 8] [0, 4, 7] [0, 5, 8] [0, 5, 7] [4, 5, 8] [4, 5, 7] <br>Aceste subseturi au lungimea egala cu numarul de pasi(3) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mari decat sP<br>	- care sunt mai mici decat s1 si se afla dupa s1 in vector<br>	- care sunt mai mici decat sP si se afla dupa sP in vector<br>	- care apartin intervalului [s1, sP], dar nu sunt in secventa<br><br>Pentru secventa [2, 6, 8] elementele [ 11 10 0 9 4 5 7 1 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [2, 6, 7] elementele [ 11 10 0 9 4 5 8 1 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 6 => stergem: [11 10 9 6 7 1] <br><br>b)Selectia minimului:<br><br>Pentru selectia minimului am gasit 22 subseturi de lungime 2 : [2, 11] [2, 10] [2, 9] [2, 6] [2, 4] [2, 5] [2, 8] [2, 7] [0, 9] [0, 6] [0, 4] [0, 5] [0, 8] [0, 7] [0, 1] [6, 8] [6, 7] [4, 5] [4, 8] [4, 7] [5, 8] [5, 7] <br>Aceste subseturi au lungimea egala cu numarul de pasi(2) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP si se afla la stanga lui sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>Pentru secventa [2, 11] elementele [ 10 0 9 6 4 5 8 7 1 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [2, 10] elementele [ 11 0 9 6 4 5 8 7 1 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 6 => stergem: [11 10 9 6 7 1] <br><br>c)Insertie:<br><br>Pentru insertie am gasit 4 subseturi care respecta cerinta : [2, 4, 5, 8] [2, 4, 5, 7] [0, 4, 5, 8] [0, 4, 5, 7] <br>Aceste subseturi au lungimea egala cu numarul de pasi+1(3+1=4) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>Pentru secventa [2, 4, 5, 8] elementele [ 11 10 0 9 6 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [2, 4, 5, 7] elementele [ 11 10 0 9 6 8 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 5 => stergem: [11 10 0 9 6] </pre><pre id="7" onclick="afisare(7)">
Problem11<br>Idee de rezolvare:<br>Partitionarea Lomuto are ca scop alegerea unui element dintr-un vector de numere, care se va numi<br>pivot si modificarea pozitiilor elementelor din vector astfel incat, la finalul algoritmului,<br>elementele cu valoare mai mica decat pivotul se vor afla la stanga sa, iar cele mai mari decat<br>pivotul, in dreapta acestuia, pivotul ajungand pe pozitia in care ar sta daca am sorta vectorul.<br><br>Interschimbam 11 cu 50 iar i devine 0<br>Sirul devine:[11, 47, 95, 87, 50, 17, 35]<br><br>Interschimbam 17 cu 47 iar i devine 1<br>Sirul devine:[11, 17, 95, 87, 50, 47, 35]<br><br>Trecem la urmatorul element din sir.<br>Am ajuns la capatul sirului. In final, avem vectorul partitionat: [11, 17, 35, 87, 50, 47, 95]</pre><pre id="8" onclick="afisare(8)">
Problem12<br>12. Solutia problemei: <br><br>                    0<br><br>          1<br><br>                    4<br><br>                    7<br><br>          2<br><br>          3<br><br>6<br><br>          5<br><br>Vectorul de tati: [1, 6, 6, 6, 1, 6, -1, 1]</pre>