<pre id="0" onclick="afisare(0)"><br><br>Problem2<br><br><br>Idee de rezolvare:<br><br>Initial, avem doua liste: shuffled_data si data. Trebuie sa ordonam elementele din shuffled_data in ordinea pe care o au in data. Pentru simplitate, prima coada va fi numita in continuare Q1, iar a doua coada Q2. Introducem elementele din shuffled_data in Q1, si parcurgem lista data cu un contor, verificand la fiecare pas daca elementul curent din data este egal cu front-ul lui Q1; daca da, il eliminam din Q1 si il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, il eliminam din Q1 si il adaugam in Q2, la final. Repetam aceeasi pasi pentru Q2: comparam front-ul lui Q2 cu elementul curent din data, daca sunt egale, scoatem elementul din Q2, il punem in vectorul de solutii si trecem la urmatorul element din data; daca nu, scoatem elementul din Q2 si il adaugam la final in Q1. Pentru optimizare, putem incepe algoritmul dupa adaugarea primului element in coada Q1, nu este nevoie sa adaugam intai toate elementele pentru ca algoritmul sa functioneze, insa avem nevoie de verificari suplimentare pentru a nu adauga/sterge elemente inexistente(nule) din cozi.<br><br>Secventa finala este: p 1 w 1 o 1 y 1 t 1 d 1 m I_1 I_2 2 1 2 I_2 1 2 I_2 1 2 I_2 I_2 I_1 <br><strike>p</strike> <strike>w</strike> <strike>o</strike> <strike>y</strike> <strike>t</strike> <strike>d</strike> <strike>m</strike> <strike>w</strike> <strike>o</strike> <strike>t</strike> <strike>w</strike> <br><strike>p</strike> <strike>w</strike> <strike>o</strike> <strike>y</strike> <strike>t</strike> <strike>d</strike> <strike>w</strike> <strike>o</strike> <strike>t</strike> <br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br>Idee de rezolvare: Selectam primul element din vectorul b. Luam fiecare element din vectorul a si il introducem in stiva.<br>Cat timp stiva nu este goala si ultimul element din stiva este egal cu elementul curent din b, atunci il scoatem, afisam p si trecem mai departe in b.<br>	Adaugam 7 la operatii si adaugam elementul 7 in stiva<br><table border=1><tr><td>7</td></tr></table><br>	Adaugam 4 la operatii si adaugam elementul 4 in stiva<br><table border=1><tr><td>7</td><td>4</td></tr></table><br>	Adaugam 2 la operatii si adaugam elementul 2 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>2</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 2 din stiva<br><table border=1><tr><td>7</td><td>4</td><td><strike>2</strike> </td></tr></table><br>	Adaugam 8 la operatii si adaugam elementul 8 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>8</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 8 din stiva<br><table border=1><tr><td>7</td><td>4</td><td><strike>8</strike> </td></tr></table><br>	Adaugam 3 la operatii si adaugam elementul 3 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td></tr></table><br>	Adaugam 6 la operatii si adaugam elementul 6 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td>6</td></tr></table><br>	Adaugam 5 la operatii si adaugam elementul 5 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td>6</td><td>5</td></tr></table><br>	Adaugam 1 la operatii si adaugam elementul 1 in stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td>6</td><td>5</td><td>1</td></tr></table><br>	Adaugam p la operatii si scoatem elementul 1 din stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td>6</td><td>5</td><td><strike>1</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 5 din stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td>6</td><td><strike>5</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 6 din stiva<br><table border=1><tr><td>7</td><td>4</td><td>3</td><td><strike>6</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 3 din stiva<br><table border=1><tr><td>7</td><td>4</td><td><strike>3</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 4 din stiva<br><table border=1><tr><td>7</td><td><strike>4</strike> </td></tr></table><br>	Adaugam p la operatii si scoatem elementul 7 din stiva<br><table border=1><tr><td><strike>7</strike> </td></tr></table><br>Operatiile necesare aplicate:<br>7 4 2 p 8 p 3 6 5 1 p p p p p p <br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br>Idee de rezolvare: Mutam elementele din stiva in prima coada pana la elementul cautat, pe care il  stergem. Mutam elem. din prima coada in cealalta pana cand in prima coada ramane un singur element,pe care il adaugam in stiva. Repetam procedeul pentru fiecare coada alternativ, pana cand acestea devin vide si astfel elementele sunt adaugate in ordinea corecta in stiva<br><br>Stiva este: [6, 4, 8, 7, 9, 5, 3, 10]<br>Rezolvare: Mutam elementele din stiva in coada 1, pana gasim elementul de sters, adica 8<br>P: Mutam elementul 10 in coada 1<br>P: Mutam elementul 3 in coada 1<br>P: Mutam elementul 5 in coada 1<br>P: Mutam elementul 9 in coada 1<br>P: Mutam elementul 7 in coada 1<br>S: Stergem elementul 8 din stiva<br><br>Stiva devine: [6, 4], prima coada devine: [10, 3, 5, 9, 7] a doua coada devine []<br><br>Mutam cate un element din coada nevida in coada vida pana cand in coada din care se face extragerea ramane un singur el.,pe care il adaugam in stiva:<br>1: Mutam din coada 1 elem. 10 in coada 2<br>1: Mutam din coada 1 elem. 3 in coada 2<br>1: Mutam din coada 1 elem. 5 in coada 2<br>1: Mutam din coada 1 elem. 9 in coada 2<br>I_1: Stergem elementul 7 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [6, 4, 7], prima coada devine: [], a doua coada devine: [10, 3, 5, 9]<br><br>2: Mutam din coada 2 elem 10 in coada 1<br>2: Mutam din coada 2 elem 3 in coada 1<br>2: Mutam din coada 2 elem 5 in coada 1<br>I_2: Stergem elementul 9 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[6, 4, 7, 9], prima coada devine:[10, 3, 5], a doua coada devine:[]<br>1: Mutam din coada 1 elem. 10 in coada 2<br>1: Mutam din coada 1 elem. 3 in coada 2<br>I_1: Stergem elementul 5 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [6, 4, 7, 9, 5], prima coada devine: [], a doua coada devine: [10, 3]<br><br>2: Mutam din coada 2 elem 10 in coada 1<br>I_2: Stergem elementul 3 din coada 2 si apoi il adaugam in stiva<br><br>Stiva devine[6, 4, 7, 9, 5, 3], prima coada devine:[10], a doua coada devine:[]<br>I_1: Stergem elementul 10 din coada 1 si apoi il adaugam in stiva<br><br>Stiva devine: [6, 4, 7, 9, 5, 3, 10], prima coada devine: [], a doua coada devine: []<br><br>Succesiunea operatiilor este: P, P, P, P, P, S, 1, 1, 1, 1, I_1, 2, 2, 2, I_2, 1, 1, I_1, 2, I_2, I_1<br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>1. Inserati urmatoarele valori, pe rand, intr-un arbore binar de cautare: [19, 75, 34, 67, 10, 52, 99, 98, 67]<br>2. Scrieti nodurile care se pot sterge in doua moduri. <br>3. Stergeti elementul: 67<br>Idee de rezolvare: Vom insera elemente in arbore folosind o functie prin recurenta care<br>        returneaza radacina arborelui, deoarece avem nevoie de referinta. Stergerea unui element se va face <br>        in functie de caz: daca are 0, 1 sau 2 copii. In primele 2 cazuri gasim parintele, cu ajutorul <br>        functiei parent, iar apoi mutam referinta nodului parintelui la None, respectiv la copilul <br>        nodului. In al treilea caz, cautam nodul cu care nodul nostru va fi inlocuit cu ajutorul <br>        functiei minValue(care ia cel mai mic nod din dreapta), punem valoarea in nodul curent, apoi<br>        stergem nodul cu care am inlocuit. Elementele care pot fi sterse in 2 moduri sunt cele care au 2 copii,<br>        iar acestea vor fi gasite cu ajutorul functiilor children(calculeaza numarul de copii) si morechildren<br>        (gaseste nodurile care au 2 copii)<br>ELementele arborelui in inordine sunt: [10, 52, 67, 34, 98, 99, 75, 19]<br>ELementele arborelui in preordine sunt: [19, 10, 75, 34, 67, 52, 99, 98]<br>Elementele care se pot sterge in 2 moduri sunt: [19, 75]<br>Elementul care trebuie sters este: 67<br>Arborele, din care s-a sters 67: [19, 10, 75, 34, 52, 99, 98]<br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem7<br>Reconstruim arborele si facem parcurgerile:<br>Parcurgerea SRD a arborelui binar creat este:[6, 44, 15, 30, 3, 11]<br>Parcurgerea RSD a arborelui binar creat este:[44, 6, 11, 15, 3, 30]<br>Parcurgerea SDR a arborelui binar creat este: [6, 30, 3, 15, 11, 44]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem8<br>============================= <br><br>a) - Aplicam 3 pasi din Insertion Sort vectorului [38, 83, 54, 81, 95, 60, 3, 94, 41]: <br>	 pasul 1: [38, 83, 54, 81, 95, 60, 3, 94, 41]<br>	 pasul 2: [38, 54, 83, 81, 95, 60, 3, 94, 41]<br>	 pasul 3: [38, 54, 81, 83, 95, 60, 3, 94, 41]<br>	 Dupa Selection Sort, vectorul devine: [38, 54, 81, 83, 95, 60, 3, 94, 41] <br><br> - Aplicam 2 pasi din Bubble Sort vectorului [38, 54, 81, 83, 95, 60, 3, 94, 41]: <br>	 pasul 1: [38, 54, 81, 83, 60, 3, 94, 41, 95]<br>	 pasul 2: [38, 54, 81, 60, 3, 83, 41, 94, 95]<br>	 Dupa Bubble Sort, vectorul devine: [38, 54, 81, 60, 3, 83, 41, 94, 95] <br><br>Rezultat: [38, 54, 81, 60, 3, 83, 41, 94, 95]<br><br>============================= <br><br>b) - Aplicam 4 pasi din Maximum Selection Sort vectorului [38, 83, 54, 81, 95, 60, 3, 94, 41]: <br>	 pasul 1:  [38, 83, 54, 81, 95, 60, 3, 94, 41]<br>	 pasul 2:  [38, 83, 54, 81, 41, 60, 3, 94, 95]<br>	 pasul 3:  [38, 83, 54, 81, 41, 60, 3, 94, 95]<br>	 pasul 4:  [38, 3, 54, 81, 41, 60, 83, 94, 95]<br>- Aplicam 2 pasi din Minimum Selection Sort vectorului [38, 3, 54, 60, 41, 81, 83, 94, 95]: <br>	 pasul 1:  [3, 38, 54, 60, 41, 81, 83, 94, 95]<br>	 pasul 2:  [3, 38, 54, 60, 41, 81, 83, 94, 95]<br>	 pasul 3:  [3, 38, 41, 60, 54, 81, 83, 94, 95]<br>Rezultat: [3, 38, 41, 60, 54, 81, 83, 94, 95]<br><br>========================<br><br>c) Aplic partitionare Hoare punand fiecare element al vectorului ca pivot<br> 	 >Aleg 38 drept pivot, vectorul devine: [3, 83, 54, 81, 95, 60, 38, 94, 41]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 83 drept pivot, vectorul devine: [38, 41, 54, 81, 3, 60, 95, 94, 83]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 54 drept pivot, vectorul devine: [38, 41, 3, 81, 95, 60, 54, 94, 83]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 81 drept pivot, vectorul devine: [38, 41, 54, 3, 60, 95, 81, 94, 83]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 95 drept pivot, vectorul devine: [38, 83, 54, 81, 41, 60, 3, 94, 95]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 60 drept pivot, vectorul devine: [38, 41, 54, 3, 60, 95, 81, 94, 83]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 3 drept pivot, vectorul devine: [3, 83, 54, 81, 95, 60, 38, 94, 41]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 94 drept pivot, vectorul devine: [38, 83, 54, 81, 41, 60, 3, 94, 95]<br>		*Putem sa-l folosi drept pivot<br>	 >Aleg 41 drept pivot, vectorul devine: [38, 41, 3, 81, 95, 60, 54, 94, 83]<br>		*Putem sa-l folosi drept pivot<br><br><br>============================= <br><br>d)exemplific Insertion Sort<br>	 pasul 1:  [38, 83, 54, 81, 95, 60, 3, 94, 41] <br>	 pasul 2:  [38, 54, 83, 81, 95, 60, 3, 94, 41] <br>	 pasul 3:  [38, 54, 81, 83, 95, 60, 3, 94, 41] <br>	 pasul 4:  [38, 54, 81, 83, 95, 60, 3, 94, 41] <br>	 pasul 5:  [38, 54, 60, 81, 83, 95, 3, 94, 41] <br>	 pasul 6:  [3, 38, 54, 60, 81, 83, 95, 94, 41] <br>	 pasul 7:  [3, 38, 54, 60, 81, 83, 94, 95, 41] <br>	 pasul 8:  [3, 38, 41, 54, 60, 81, 83, 94, 95] <br>	 Dupa Insertion Sort, vectorul este sortat : [3, 38, 41, 54, 60, 81, 83, 94, 95] <br><br>Exemplific Selection Sort (minim)<br>	 pasul 1: [3, 83, 54, 81, 95, 60, 38, 94, 41]<br>	 pasul 2: [3, 38, 54, 81, 95, 60, 83, 94, 41]<br>	 pasul 3: [3, 38, 41, 81, 95, 60, 83, 94, 54]<br>	 pasul 4: [3, 38, 41, 54, 95, 60, 83, 94, 81]<br>	 pasul 5: [3, 38, 41, 54, 60, 95, 83, 94, 81]<br>	 pasul 6: [3, 38, 41, 54, 60, 81, 83, 94, 95]<br>	 pasul 7: [3, 38, 41, 54, 60, 81, 83, 94, 95]<br>	 pasul 8: [3, 38, 41, 54, 60, 81, 83, 94, 95]<br>	 pasul 9: [3, 38, 41, 54, 60, 81, 83, 94, 95]<br>Dupa Selection Sort, vectorul este sortat : [3, 38, 41, 54, 60, 81, 83, 94, 95]<br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem9<br>9. Solutia problemei: <br>1. A/F ca [79, 97, 77, 57, 14, 67, 10] rezulta din 2 pasi de Selection Sort (Maxim) : <br>97 > 79 => (FALS) <br><br> 2. A/F ca [79, 97, 77, 57, 14, 67, 10] rezulta din 2 pasi de Insertion Sort : <br>97 > 79<br>(ADEVARAT) <br><br>3. A/F partitionat pentru Quicksort cu pivotul 10 <br>i. Pozitia pivotului = 7<br>ii. Vf. elementele de la stanga sunt mai mici <br>79 >= 10 => (FALS) <br><br>iii. Vf elementele de la dreapta mai mari<br>4. Exemplificam Bubble sort: <br>i.Vectorul are 7 elemente <br>ii.Cat timp facem interschimbari = > nu am terminat <br>0: [79, 97, 77, 57, 14, 67, 10]<br>1: [79, 77, 57, 14, 67, 10, 97]<br>2: [77, 57, 14, 67, 10, 79, 97]<br>3: [57, 14, 67, 10, 77, 79, 97]<br>4: [14, 57, 10, 67, 77, 79, 97]<br>5: [14, 10, 57, 67, 77, 79, 97]<br>6: [10, 14, 57, 67, 77, 79, 97]<br><br>5.Exemplificam Selection Sort(Maxim): <br>i.Vectorul are 7 elemente <br>0: [79, 97, 77, 57, 14, 67, 10]<br>1: [97, 79, 77, 57, 14, 67, 10]<br>2: [97, 79, 77, 57, 14, 67, 10]<br>3: [97, 79, 77, 57, 14, 67, 10]<br>4: [97, 79, 77, 67, 14, 57, 10]<br>5: [97, 79, 77, 67, 57, 14, 10]<br>6: [97, 79, 77, 67, 57, 14, 10]<br><br><br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem10<br>Pentru toate cazurile generam submultimi de elemente din vector pentru a cauta-o pe aceea care <br>are numarul minim de elemente pe care sa le putem sterge pentru a satisface fiecare cerinta.<br>Generarea submultimilor se face prin selectia combinarilor de n elemente luate cate nrPasi <br>corespunzator subpunctului.<br>La fiecare pas din cerinta iteram prin combinarile genrate si le alegem pe cele care au o<br>lungime corespunzatoarenumarului de pasi pe care l-a facut altgoritmul si sunt sortate<br><br>a)Selectia maximului.<br><br>Pentru selectia maximului am gasit 18 subseturi de lungime 2 : [9, 10] [9, 11] [1, 10] [1, 8] [1, 4] [1, 7] [1, 11] [1, 6] [1, 2] [1, 5] [10, 11] [8, 11] [4, 7] [4, 11] [4, 6] [4, 5] [7, 11] [2, 5] <br>Aceste subseturi au lungimea egala cu numarul de pasi(2) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mari decat sP<br>	- care sunt mai mici decat s1 si se afla dupa s1 in vector<br>	- care sunt mai mici decat sP si se afla dupa sP in vector<br>	- care apartin intervalului [s1, sP], dar nu sunt in secventa<br><br>Pentru secventa [9, 10] elementele [ 1 8 4 7 11 6 2 5 0 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [9, 11] elementele [ 1 10 8 4 7 6 2 5 0 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 7 => stergem: [8 4 7 6 2 5 0] <br><br>b)Selectia minimului:<br><br>Pentru selectia minimului am gasit 10 subseturi de lungime 3 : [9, 10, 11] [1, 10, 11] [1, 8, 11] [1, 4, 7] [1, 4, 11] [1, 4, 6] [1, 4, 5] [1, 7, 11] [1, 2, 5] [4, 7, 11] <br>Aceste subseturi au lungimea egala cu numarul de pasi(3) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP si se afla la stanga lui sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>Pentru secventa [9, 10, 11] elementele [ 1 8 4 7 6 2 5 0 ] au fost sterse conform celor de mai sus.<br>Pentru secventa [1, 10, 11] elementele [ 9 8 4 7 6 2 5 0 ] au fost sterse conform celor de mai sus.<br>...<br><br>RASPUNS: Secventa minima pe care o stergem este de lungime 7 => stergem: [9 10 8 6 2 5 0] <br><br>c)Insertie:<br><br>Pentru insertie am gasit 1 subseturi care respecta cerinta : [1, 4, 7, 11] <br>Aceste subseturi au lungimea egala cu numarul de pasi+1(3+1=4) pentru acest subpunct, din cerinta.<br><br>La fiecare pas consideram secventa sortata  s1, ..., sP, unde P e lungimea secventei, si eliminam numerele:<br>	- care sunt mai mici decat s1<br>	- care sunt mai mari decat sP<br>	- care apartin intervalului [s1, sP] dar nu se afla un subset<br><br>Pentru secventa [1, 4, 7, 11] elementele [ 9 10 8 ] au fost sterse conform celor de mai sus.<br>RASPUNS: Secventa minima pe care o stergem este de lungime 3 => stergem: [9 10 8] <br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem11<br>Idee de rezolvare:<br>Partitionarea Lomuto are ca scop alegerea unui element dintr-un vector de numere, care se va numi<br>pivot si modificarea pozitiilor elementelor din vector astfel incat, la finalul algoritmului,<br>elementele cu valoare mai mica decat pivotul se vor afla la stanga sa, iar cele mai mari decat<br>pivotul, in dreapta acestuia, pivotul ajungand pe pozitia in care ar sta daca am sorta vectorul.<br><br>Interschimbam 32 cu 65 iar i devine 0<br>Sirul devine:[32, 41, 92, 65, 37]<br><br>Trecem la urmatorul element din sir.<br>Am ajuns la capatul sirului. In final, avem vectorul partitionat: [32, 37, 92, 65, 41]<br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problem12<br>12. Idee de rezolvare: Construim vectorul tata asociat arborelui.<br><br>Parcurgem numerele date de la stanga la dreapta.<br>Primul numar din parcurgere este radacina si are tatal -1.<br>Tatal unui numar gasit pentru prima data este precedentul sau.<br>Daca elementul a mai fost intalnit trecem mai departe.<br><br>3 este radacina.<br>4 nevizitat => 3 = tatal <br>2 nevizitat => 4 = tatal <br>0 nevizitat => 2 = tatal <br>1 nevizitat => 2 = tatal <br>5 nevizitat => 2 = tatal <br>7 nevizitat => 2 = tatal <br>6 nevizitat => 3 = tatal <br><br>3<br><br>          4<br>                              0<br><br>                              1<br><br>                    2<br><br>                              5<br><br>                              7<br><br>          6<br><br>Vectorul de tati este [2, 2, 4, -1, 3, 2, 3, 2]<br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem13<br>Idee de rezolvare: <br>Deoarece deja stim ca se cere un Arbore Binar de Cautare, fixam ultimul element din parcurgere ca fiind radacina si o impartim in doua intervale: <br>	-prima parte contine numere mai mici decat radacina si setul de elemente va merge in stanga acesteia <br>	-a doua parte contine numere mai mari decat radacina si setul de elemente va merge in dreapta acesteia <br>Repetam recursiv pentru fiecare interval.<br>Arborele construit este:<br><br><br>Nod: 47; Fiu stanga: 8; Fiu dreapta: 48<br>Nod: 8; Fiu stanga: 6; Fiu dreapta: 28<br>Nod: 6<br>Nod: 28; Fiu stanga: 22; Fiu dreapta: 46<br>Nod: 22<br>Nod: 46; Fiu stanga: 40<br>Nod: 40<br>Nod: 48<br><br>        48 -----<br>        |<br><br>47 -------<br>|<br><br>                        46 -<br>                        |<br><br>                                40 <br>                                |<br><br>                28 ---<br>                |<br><br>                        22 -<br>                        |<br><br>        8 -----<br>        |<br><br>                6 ---<br>                |<br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem13<br>Idee de rezolvare: <br>Deoarece deja stim ca se cere un Arbore Binar de Cautare, fixam ultimul element din parcurgere ca fiind radacina si o impartim in doua intervale: <br>	-prima parte contine numere mai mici decat radacina si setul de elemente va merge in stanga acesteia <br>	-a doua parte contine numere mai mari decat radacina si setul de elemente va merge in dreapta acesteia <br>Repetam recursiv pentru fiecare interval.<br>Arborele construit este:<br><br><br>Nod: 9; Fiu stanga: 2; Fiu dreapta: 46<br>Nod: 2<br>Nod: 46; Fiu stanga: 45<br>Nod: 45; Fiu stanga: 39<br>Nod: 39; Fiu stanga: 19; Fiu dreapta: 43<br>Nod: 19; Fiu dreapta: 21<br>Nod: 21<br>Nod: 43<br><br>        46 -----<br>        |<br><br>                45 ---<br>                |<br><br>                                43 <br>                                |<br><br>                        39 -<br>                        |<br><br>                                        21 <br>                                        |<br><br>                                19 <br>                                |<br><br>9 -------<br>|<br><br>        2 -----<br>        |<br><br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem16<br><br><br>Idee de rezolvare:<br><br>Initial, avem vectorul v, indexul pivotului Ipiv si capetele vectorului: left si right.Primul pas este sa punem pivotul pe ultima pozitie prin interschimbare si sa se initieze numarul interschimbarilor cu 0.Parcurgem vectorul de la stanga la dreapta si cat timp valoarea elementului de pe pozitia j este egala cu valoarea pivotului, testam daca pozitia j este mai mica decat capatul din dreapta al vectorului, daca da, scad valoarea indicelui capatului de interval cu 1, interschimb valoarea curenta cu valoarea noului capat de interval cu indicele decrementat mai sus si valoarea lui nr se incrementeaza cu 1. Daca pozitia j este mai mare decat capatul din dreapta al vectorului, se trece la urmatorul element din vector dupa ce se testeaza pasul urmator. Testam daca valoarea curenta este mai mica decat cea a pivotului si daca da se interschimba valoarea curenta cu valoarea indicelui i+1, astfel toate numerele mai mici decat pivotul sunt plasate la inceputul vectorului.Valoarea i se opreste la ultimul element mai mic sau egal decat pivotul si mutam pivotul dupa valoarea din sir cu indicele i.Se parcurge sirul si se muta elementele mai mici sau egale cu pivotul inaintea pivotului si cele mai mari dupa el.Se muta elementele la inceputul vectorului pana la pozitia i+1. <br><br>Indexul pivotului este: 6<br><br>Inainte de mutarea elementelor egale cu pivotul:<br>[3, 3, 0, 4, 3, 4, 3, 4, 1, 5]<br>Pivootul si toate elementele egale cu pivotul sunt la sfarsitul sirului <br>Acum mutam pivotul si dublurile dupa ultimul element mai mic decat pivotul<br><br><br><br>Secventa finala este: 3 3 0 4 3 4 3 4 1 5 <br><br> Numarul de interschimbari este:10<br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem23<br>Ideea de rezolvare:<br>Aplicam shiftDown pentru nodurile de la [n/2,0] (in ordinea asta).<br>Shiftdown compara recursiv un nod i cu cei 2 copii si se interschimba<br>cu cel mai mic si aplicam algoritmul pana ajungem la o frunza.<br>Dupa pasul 1 sirul nostru arata astfel:<br>[2, 7, 10, 5, 1, 6, 9, 3, 11, 8, 4]<br>Dupa pasul 2 sirul nostru arata astfel:<br>[2, 7, 10, 5, 1, 6, 9, 3, 11, 8, 4]<br>Dupa pasul 3 sirul nostru arata astfel:<br>[2, 7, 10, 3, 1, 6, 9, 5, 11, 8, 4]<br>Dupa pasul 4 sirul nostru arata astfel:<br>[2, 7, 6, 3, 1, 10, 9, 5, 11, 8, 4]<br>Dupa pasul 5 sirul nostru arata astfel:<br>[2, 1, 6, 3, 4, 10, 9, 5, 11, 8, 7]<br>Dupa pasul 6 sirul nostru arata astfel:<br>[1, 2, 6, 3, 4, 10, 9, 5, 11, 8, 7]<br>In final vom obtine min-ansamblul: <br>[1, 2, 6, 3, 4, 10, 9, 5, 11, 8, 7]<br>Complexitatea algoritmului este O(n).<br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem29<br>Idee de rezolvare:<br><br>Inseram intr-un vector v1 primele elemente mai mari decat 0 (daca primim un zero inainte, inseamna ca nu avem k elemente, deci le afisam pe toate).<br><br>Acum in acel vector v1 avem k elemente.<br><br>Continuam sa citim urmatoarele elemente intr-un vector v2. Cand primim 0, punem la gramada elemente lui v1 si ale lui v2 si aplicam statistici de ordine ca sa obtinem cele mai mari elemente din v1 si v2. Facem o partitionare quicksort cu un pivot ales la intamplare, si verificam daca pivotul este pe a k-a pozitie sau nu; daca k > pozitia, partitionam la stanga; daca k < pozitia, partitionam la dreapta; altfel, ne aflam pe pozitia k si acesta este numarul cautat.<br><br>Sirul dat : 44 64 88 20 25 0 51 16 29 76 93 79 3 0 18 6<br>k= 4<br><br>v1: 44 64 88 20<br>v2: 25<br>v: 44 64 88 20 25 => 20 25 44 64 88<br>Cele mai mari k elemente: 25 44 64 88<br><br>v1: 25 44 64 88<br>v2: 51 16 29 76 93 79 3<br>v: 25 44 64 88 51 16 29 76 93 79 3 => 16 44 29 3 25 51 64 76 88 93 79<br>Cele mai mari k elemente: 76 88 93 79<br><br><br></pre>