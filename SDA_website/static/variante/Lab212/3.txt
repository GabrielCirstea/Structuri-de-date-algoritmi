<br><pre id="0" onclick="afisare(0)"><br><br>Problem2<br><br><br>Problema 2 - 2C:<br><br>Aveti la dispozitie 2 cozi. Introduceti elementele  c e m k l p h in aceasta ordine, obtinand la final  m k c h l e p.<br><br>Operatii: <br><br> 'caracter' -> se introduce caracterul in prima coada <br><br>1 -> se scoate din prima coada si se introduce in a doua coada <br><br>2 -> se scoate din a doua coada si se introduce in prima coada <br><br>I_1 se extrage un element din coada 1 si se afiseaza <br><br>I_2 se extrage un element din coada 2 si se afiseaza <br><br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br>1. Sa se gaseasca o succesiune de mutari astfel incat introducant elementele:  [3, 9, 4, 1, 5, 6, 2, 8, 7] in stiva, la final sa se afiseze: [8, 2, 7, 6, 5, 1, 4, 9, 3]<br>Pentru rezolvare avem nevoie de operatiile: <br>    'n'-> inserarea numarului in stiva<br>    'p'-> extragerea unui numar din stiva si afisarea<br><br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br>SS. Avand stiva: [6, 7, 10, 4, 9, 8, 3] gasiti o succesiune de mutari a.i. sa stergeti din stiva elementul 10 avand la dispozitie 2 cozi si operatiile:<br>P -> se extrage un el. din stiva, se introduce in prima coada<br>S -> se sterge un element din stiva<br>1 -> se extrage un el. din coada 1 si se introduce in coada 2<br>2 -> se extrage un el. din coada 2 si se introduce in coada 1<br>I_1 -> se extrage un el. din coada 1 si se introduce in stiva<br>I_2 -> se extrage un el. din coada 2 si se introduce in stiva<br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>1. Inserati urmatoarele valori, pe rand, intr-un arbore binar de cautare: [53, 95, 79, 6, 88, 61, 94, 5, 15, 13, 62, 6]<br>2. Scrieti nodurile care se pot sterge in doua moduri. <br>3. Stergeti elementul: 6<br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem7<br>Problema 7: RA <br>Reconstruiti arborele care are parcurgerile RSD si SRD date si afisati parcurgerea SDR<br><br>Generarea cerintei<br>Pentru a genera aleator doua parcurgeri RSD si SRD corecte, generam aleator un vector din care<br>vom construi un ABC, pentru care vom face parcurgerile SRD si RSD<br>In continuare, ne folosim de dictionar pentru a redenumi elementele din ABC, fiecare nod primind o<br>valoare random si astfel ABC devenind un arbore binar oarecare. Pentru acest arbore vom face parcurgerile<br>SRD si RSD rezolvand problema generarii cerintei<br><br>Idee de rezolvare a problemei:<br>Pornind de la cele 2 parcurgeri vom reconstrui in mod recursiv arborele binar astfel:<br> -vom determina radacina subarborelui curent din parcurgerea in preordine<br> -o vom cauta in parcurgerea in inordine<br> -vom apela recursiv functia pentru a construi intai subarborele stang si apoi cel drept<br>Setul de elemente random din care vom face ABC este: [14, 10, 3, 38, 49, 15, 23]<br>Inseram pe rand fiecare element fiecare element astfel incat in fiecare valoare din subarborele stang < radacina < fiecare valoare din subarborele drept.<br>Inseram in ABC nodul 10<br>Inseram in ABC nodul 3<br>Inseram in ABC nodul 38<br>Inseram in ABC nodul 49<br>Inseram in ABC nodul 15<br>Inseram in ABC nodul 23<br>Parcurgerea SRD a ABC este:<br>[3, 10, 14, 15, 23, 38, 49]<br>Parcurgerea RSD a ABC este:<br>[14, 10, 3, 38, 15, 23, 49]<br>Redenumirea nodurilor in cele dou parcurgeri este:<br>{14: 8, 10: 50, 3: 36, 38: 30, 15: 14, 23: 3, 49: 20}<br>Dupa redenumirea nodurilor parcurgerea finala RSD este:<br>[8, 50, 36, 30, 14, 3, 20]<br>Dupa redenumirea nodurilor parcurgerea finala SRD este:<br>[36, 50, 8, 14, 3, 30, 20]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem8<br>8. Primiti sirul: [41, 61, 42, 30, 6, 82, 0]. Rezolvati urmatoarele cerinte:<br>	- aplicati 2 pasi din alg. de sort. prin insertie urmat de 2 pasi din alg. de sort. prin metoda bulelor;<br>	- aplicati 3 pasi din alg. de sort. prin selectia maximului urmat de 3 pasi din alg. de sort. prin selectia minimului<br>	- ce elemente ar putea fi considerate pivoti a.i. la finalul unei partitionari a alg. Quicksort sa avem primele 3 elemente sortate si specificati partitionarea folosita (Hoare/Lomuto/etc.)<br>	- exemplificati sortarea sirului folosind Insertion Sort si Selection Sort (Minim)<br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem9<br>Problema 9: Se primesc numerele: 80, 54, 43, 14, 7, 71, 0, 15.<br>Raspundeti cu adevarat sau fals:<br>1. Vectorul a rezultat in urma aplicarii a 4 pasi din Selection Sort (Maxim).<br>2. Vectorul a rezultat in urma aplicarii a 4 pasi din Insertion Sort.<br>3. Vectorul a rezultat in urma unei partitionari folosind pivotul 54.<br>Exemplificati sortarea sirului folosind Bubble Sort si Selection Sort (Maxim).<br><br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem10<br>Primind sirul: 3, 7, 0, 10, 4, 1, 2, 11, 5. Gasiti numarul minim de elemente care pot fi sterse<br>a.i. sa se poata considera ca s-au efectuat:<br>a) 2 pasi din alg. de sort. prin selectia max<br>b) 3 pasi din alg. de sort. prin selectia min<br>c) 2 pasi din alg. de sort. prin insertie directa<br><br>=================================================<br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem11<br>11. Partitionati Lomuto urmatorul vector: [81, 45, 63, 96, 40, 3] folosind pivotul: 96<br><br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problem12<br>Problema 12:<br>Reconstruiti un arbore oarecare, primind urmatoarea parcurgere continua in adancime a arborelui,pornind din radacina: 1, 2, 8, 2, 10, 2, 1, 4, 3, 0, 3, 4, 5, 4, 9, 4, 11, 4, 1, 6, 1, 7, 1<br><br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem13<br>RAP: Primind parcurgerea in postordine (SDR) a unui arbore binar, reconstruiti arborele<br>SDR: [7, 13, 31, 26, 37, 39, 35, 10, 0]<br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem13<br>RAP: Primind parcurgerea in postordine (SDR) a unui arbore binar, reconstruiti arborele<br>SDR: [17, 16, 9, 19, 4, 30, 37, 40, 21]<br><br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem14<br>Avem secventa:[47, 93, 55, 94, 47, 14, 76, 49, 20, 19, 27, 46, 20, 67, 3, 11, 5, 36, 80, 65]<br> Se va afisa parcurgerea in postordine a arborelui si un exemplu de o secventa care nu poate fi parcurgerea in postordine a unui arbore si un motiv pentru care nu poate fi SDR<br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem15<br>Problema 15 (PN): Primind parcurgerea in preordine (RSD) a unui arbore binar care contine NULL daca nu exista nod, reconstruiti arborele<br>RSD: [8, 29, 'N', 'N', 30, 31, 48, 34, 'N', 'N', 22, 'N', 'N', 'N', 'N', 43, 'N', 41, 'N', 10, 45, 'N', 9, 'N', 'N', 'N']<br><br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem16<br>Partitionati urmatorul vector, folosind pivotul 4 si partitionarea de la QS pe care o folosim cand avem multe duplicate: [0, 4, 4, 5, 1, 4, 2, 5, 3, 0]<br>Scrieti numarul de interschimbari.<br></pre><br><pre id="15" onclick="afisare(15)"><br><br>Problem17<br>Primiti un sir de numere naturale.<br>Aplicati o partitionare de la QS pentru a gasi care este al k-lea element, daca vectorul ar<br>fi sortat si exemplificati algoritmul.<br>Ex: 14, 7, 9, 2, 3, 5, 8, 10 si k = 3 => v[3] = 5 (daca v ar fi sortat).<br><br>Sirul de numere primit este:[21, 29, 2, 22, 0, 24, 10, 25]<br><br></pre><br><pre id="16" onclick="afisare(16)"><br><br>Problem19<br>19. Construiti un min-heap folosind valorile: [48, 26, 7, 16, 81, 55, 94, 68, 38, 12, 18, 57] . Decapitati heap-ul.<br></pre><br><pre id="17" onclick="afisare(17)"><br><br>Problem22<br>	Cerinta:<br>22. Sa presupunem ca exista un min-heap care contine exact 4 noduri care au prioritatile: [27, 38, 58, 86]<br> Scrieti toate modurile in care puteti insera elementele, astfel incat, la finalul inserarilor, sa aveti un heap diferit.<br></pre><br><pre id="18" onclick="afisare(18)"><br><br>Problem23<br>Problema 23:<br>Primiti vectorul: [3, 10, 9, 4, 0, 2, 8, 1, 11, 5]. <br>Faceti din acest vector un min-ansamblu folosind un numar<br>minim de operatii si demonstrati complexitatea. <br><br></pre><br><pre id="19" onclick="afisare(19)"><br><br>Problem25<br>1. Sa presupunem ca am vrea sa implementam un heap ternal (fiecare nod are 3 fii). <br>2. Introduceti elementele: [33, 90, 81, 94, 22, 20, 65, 48, 74] intr-un max heap ternal si decapitati heap-ul. <br><br></pre><br><pre id="20" onclick="afisare(20)"><br><br>Problem28<br>Primiti numere naturale > 0 si atunci cand primiti 0,<br>trebuie sa afisati valoarea mediana din vector. <br>Valoarea mediana este v[mij] daca v este sortat si len e impar,<br>altfel e (v[mij1] + v[mij2]) / 2 daca e par.<br><br></pre><br><pre id="21" onclick="afisare(21)"><br><br>Problem29<br><br>Primiti 10 numere naturale si atunci cand primiti 0, trebuie sa afisati cele mai mari 3 elemente.<br><br>Sirul primit este: 69 0 87 80 83 30 0 76 47 0 85 93 0 13<br></pre><br><pre id="22" onclick="afisare(22)"><br><br>Problem41<br>Primind urmatorul graf, construiti arborele partial de cost minim folosind algoritmul lui Prim cu heap-uri.<br>Nod1 Nod2 -> cost<br></pre>