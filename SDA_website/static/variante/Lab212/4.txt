<br><pre id="0" onclick="afisare(0)"><br><br>Problem2<br><br><br>Problema 2 - 2C:<br><br>Aveti la dispozitie 2 cozi. Introduceti elementele  m x n b r g p in aceasta ordine, obtinand la final  g m b n r p x.<br><br>Operatii: <br><br> 'caracter' -> se introduce caracterul in prima coada <br><br>1 -> se scoate din prima coada si se introduce in a doua coada <br><br>2 -> se scoate din a doua coada si se introduce in prima coada <br><br>I_1 se extrage un element din coada 1 si se afiseaza <br><br>I_2 se extrage un element din coada 2 si se afiseaza <br><br><br></pre><br><pre id="1" onclick="afisare(1)"><br><br>Problem3<br>1. Sa se gaseasca o succesiune de mutari astfel incat introducant elementele:  [4, 1, 3, 2] in stiva, la final sa se afiseze: [4, 3, 2, 1]<br>Pentru rezolvare avem nevoie de operatiile: <br>    'n'-> inserarea numarului in stiva<br>    'p'-> extragerea unui numar din stiva si afisarea<br><br></pre><br><pre id="2" onclick="afisare(2)"><br><br>Problem4<br>SS. Avand stiva: [8, 2, 9, 3, 4, 6, 7, 5, 10] gasiti o succesiune de mutari a.i. sa stergeti din stiva elementul 3 avand la dispozitie 2 cozi si operatiile:<br>P -> se extrage un el. din stiva, se introduce in prima coada<br>S -> se sterge un element din stiva<br>1 -> se extrage un el. din coada 1 si se introduce in coada 2<br>2 -> se extrage un el. din coada 2 si se introduce in coada 1<br>I_1 -> se extrage un el. din coada 1 si se introduce in stiva<br>I_2 -> se extrage un el. din coada 2 si se introduce in stiva<br><br></pre><br><pre id="3" onclick="afisare(3)"><br><br>Problem5<br>1. Inserati urmatoarele valori, pe rand, intr-un arbore binar de cautare: [53, 53]<br>2. Scrieti nodurile care se pot sterge in doua moduri. <br>3. Stergeti elementul: 53<br></pre><br><pre id="4" onclick="afisare(4)"><br><br>Problem7<br>Problema 7: RA <br>Reconstruiti arborele care are parcurgerile RSD si SRD date si afisati parcurgerea SDR<br><br>Generarea cerintei<br>Pentru a genera aleator doua parcurgeri RSD si SRD corecte, generam aleator un vector din care<br>vom construi un ABC, pentru care vom face parcurgerile SRD si RSD<br>In continuare, ne folosim de dictionar pentru a redenumi elementele din ABC, fiecare nod primind o<br>valoare random si astfel ABC devenind un arbore binar oarecare. Pentru acest arbore vom face parcurgerile<br>SRD si RSD rezolvand problema generarii cerintei<br><br>Idee de rezolvare a problemei:<br>Pornind de la cele 2 parcurgeri vom reconstrui in mod recursiv arborele binar astfel:<br> -vom determina radacina subarborelui curent din parcurgerea in preordine<br> -o vom cauta in parcurgerea in inordine<br> -vom apela recursiv functia pentru a construi intai subarborele stang si apoi cel drept<br>Setul de elemente random din care vom face ABC este: [2, 30, 4, 13, 7]<br>Inseram pe rand fiecare element fiecare element astfel incat in fiecare valoare din subarborele stang < radacina < fiecare valoare din subarborele drept.<br>Inseram in ABC nodul 30<br>Inseram in ABC nodul 4<br>Inseram in ABC nodul 13<br>Inseram in ABC nodul 7<br>Parcurgerea SRD a ABC este:<br>[2, 4, 7, 13, 30]<br>Parcurgerea RSD a ABC este:<br>[2, 30, 4, 13, 7]<br>Redenumirea nodurilor in cele dou parcurgeri este:<br>{2: 24, 30: 24, 4: 40, 13: 36, 7: 12}<br>Dupa redenumirea nodurilor parcurgerea finala RSD este:<br>[24, 24, 40, 36, 12]<br>Dupa redenumirea nodurilor parcurgerea finala SRD este:<br>[24, 40, 12, 36, 24]<br><br></pre><br><pre id="5" onclick="afisare(5)"><br><br>Problem8<br>8. Primiti sirul: [18, 81, 7, 68, 96, 32, 62, 59, 67, 20]. Rezolvati urmatoarele cerinte:<br>	- aplicati 4 pasi din alg. de sort. prin insertie urmat de 3 pasi din alg. de sort. prin metoda bulelor;<br>	- aplicati 4 pasi din alg. de sort. prin selectia maximului urmat de 2 pasi din alg. de sort. prin selectia minimului<br>	- ce elemente ar putea fi considerate pivoti a.i. la finalul unei partitionari a alg. Quicksort sa avem primele 3 elemente sortate si specificati partitionarea folosita (Hoare/Lomuto/etc.)<br>	- exemplificati sortarea sirului folosind Insertion Sort si Selection Sort (Minim)<br><br></pre><br><pre id="6" onclick="afisare(6)"><br><br>Problem9<br>Problema 9: Se primesc numerele: 87, 73, 51, 34, 11, 60, 89, 1, 12, 81.<br>Raspundeti cu adevarat sau fals:<br>1. Vectorul a rezultat in urma aplicarii a 4 pasi din Selection Sort (Maxim).<br>2. Vectorul a rezultat in urma aplicarii a 4 pasi din Insertion Sort.<br>3. Vectorul a rezultat in urma unei partitionari folosind pivotul 34.<br>Exemplificati sortarea sirului folosind Bubble Sort si Selection Sort (Maxim).<br><br></pre><br><pre id="7" onclick="afisare(7)"><br><br>Problem10<br>Primind sirul: 10, 11, 6, 9, 7, 2, 5, 8, 3. Gasiti numarul minim de elemente care pot fi sterse<br>a.i. sa se poata considera ca s-au efectuat:<br>a) 3 pasi din alg. de sort. prin selectia max<br>b) 3 pasi din alg. de sort. prin selectia min<br>c) 3 pasi din alg. de sort. prin insertie directa<br><br>=================================================<br></pre><br><pre id="8" onclick="afisare(8)"><br><br>Problem11<br>11. Partitionati Lomuto urmatorul vector: [14, 88, 99, 1, 47] folosind pivotul: 1<br><br></pre><br><pre id="9" onclick="afisare(9)"><br><br>Problem12<br>Problema 12:<br>Reconstruiti un arbore oarecare, primind urmatoarea parcurgere continua in adancime a arborelui,pornind din radacina: 8, 2, 5, 2, 6, 2, 11, 2, 8, 4, 1, 0, 1, 3, 1, 7, 1, 4, 9, 4, 10, 4, 8<br><br></pre><br><pre id="10" onclick="afisare(10)"><br><br>Problem13<br>RAP: Primind parcurgerea in postordine (SDR) a unui arbore binar, reconstruiti arborele<br>SDR: [5, 27, 38, 25, 21, 45, 41, 13]<br><br></pre><br><pre id="11" onclick="afisare(11)"><br><br>Problem13<br>RAP: Primind parcurgerea in postordine (SDR) a unui arbore binar, reconstruiti arborele<br>SDR: [17, 21, 38, 47, 48, 45, 22]<br><br></pre><br><pre id="12" onclick="afisare(12)"><br><br>Problem14<br>Avem secventa:[89, 81, 82, 13, 73, 67, 22, 96, 30, 23, 62, 11, 80, 56, 64, 45, 49, 85, 98, 4]<br> Se va afisa parcurgerea in postordine a arborelui si un exemplu de o secventa care nu poate fi parcurgerea in postordine a unui arbore si un motiv pentru care nu poate fi SDR<br></pre><br><pre id="13" onclick="afisare(13)"><br><br>Problem15<br>Problema 15 (PN): Primind parcurgerea in preordine (RSD) a unui arbore binar care contine NULL daca nu exista nod, reconstruiti arborele<br>RSD: [14, 3, 26, 17, 21, 'N', 'N', 'N', 'N', 'N', 'N', 40, 25, 29, 'N', 48, 'N', 22, 'N', 'N', 8, 'N', 9, 'N', 'N', 'N']<br><br></pre><br><pre id="14" onclick="afisare(14)"><br><br>Problem16<br>Partitionati urmatorul vector, folosind pivotul 1 si partitionarea de la QS pe care o folosim cand avem multe duplicate: [4, 2, 4, 1, 3, 0, 1, 5, 2, 2]<br>Scrieti numarul de interschimbari.<br></pre><br><pre id="15" onclick="afisare(15)"><br><br>Problem17<br>Primiti un sir de numere naturale.<br>Aplicati o partitionare de la QS pentru a gasi care este al k-lea element, daca vectorul ar<br>fi sortat si exemplificati algoritmul.<br>Ex: 14, 7, 9, 2, 3, 5, 8, 10 si k = 3 => v[3] = 5 (daca v ar fi sortat).<br><br>Sirul de numere primit este:[18, 25, 8, 16, 10, 27, 7, 19, 1, 14, 9, 15]<br><br></pre><br><pre id="16" onclick="afisare(16)"><br><br>Problem19<br>19. Construiti un min-heap folosind valorile: [80, 24, 6, 86, 58, 43, 38, 25] . Decapitati heap-ul.<br></pre><br><pre id="17" onclick="afisare(17)"><br><br>Problem22<br>	Cerinta:<br>22. Sa presupunem ca exista un min-heap care contine exact 4 noduri care au prioritatile: [19, 31, 61, 81]<br> Scrieti toate modurile in care puteti insera elementele, astfel incat, la finalul inserarilor, sa aveti un heap diferit.<br></pre><br><pre id="18" onclick="afisare(18)"><br><br>Problem23<br>Problema 23:<br>Primiti vectorul: [11, 4, 2, 6, 7, 5, 3, 9, 10, 1]. <br>Faceti din acest vector un min-ansamblu folosind un numar<br>minim de operatii si demonstrati complexitatea. <br><br></pre><br><pre id="19" onclick="afisare(19)"><br><br>Problem25<br>1. Sa presupunem ca am vrea sa implementam un heap ternal (fiecare nod are 3 fii). <br>2. Introduceti elementele: [72, 94, 52, 20, 84, 18, 55, 83, 78] intr-un max heap ternal si decapitati heap-ul. <br><br></pre><br><pre id="20" onclick="afisare(20)"><br><br>Problem28<br>Primiti numere naturale > 0 si atunci cand primiti 0,<br>trebuie sa afisati valoarea mediana din vector. <br>Valoarea mediana este v[mij] daca v este sortat si len e impar,<br>altfel e (v[mij1] + v[mij2]) / 2 daca e par.<br><br></pre><br><pre id="21" onclick="afisare(21)"><br><br>Problem29<br><br>Primiti 11 numere naturale si atunci cand primiti 0, trebuie sa afisati cele mai mari 4 elemente.<br><br>Sirul primit este: 49 0 55 56 39 12 72 0 13 58 23 40 71<br></pre><br><pre id="22" onclick="afisare(22)"><br><br>Problem30<br>Primiti un sir: b e b c b a a . Gasiti numarul minim de litere (si literele) care ar trebui introduse pentru ca sirul sa devina palindrom.<br></pre><br><pre id="23" onclick="afisare(23)"><br><br>Problem31<br>Problema 31:<br>Evaluati expresia in forma postfixata si construiti un arbore pentru aceasta expresie: 4, 7, 7, 9, 8, *, *, -, 5, +, -<br><br></pre><br><pre id="24" onclick="afisare(24)"><br><br>Problem32<br>Un Prim-Min ABC este un arbore cu urmatoarele proprietati:<br>> radacina are valoarea minima din arbore;<br>> fiecare valoare din sub-arborele st. are o valoare mai mica decat orice valoare din subarborele dr;<br>> sub-arborele stang si sub-arborele drept sunt Prim-Min ABC.<br>Primim numarul 22 si Prim-Min ABC-ul dat de lista de copii:<br>	5: 7, 16<br>	7: 10, 14<br>	10: None, 12<br>	12: None, None<br>	14: 15, None<br>	15: None, None<br>	16: 18, 28<br>	18: None, 20<br>	20: None, None<br>	28: None, 29<br>	29: None, None<br>Cerinta: Decideti daca acesta  apare in acest arbore.<br><br></pre><br><pre id="25" onclick="afisare(25)"><br><br>problem33<br>Avem secventa:[67, 2, 15, 79, 65, 8, 72, 11]<br>Pe baza secventei vom crea un AVL<br>R----15<br>     L----8<br>     |    L----2<br>     |    R----11<br>     R----67<br>          L----65<br>          R----79<br>               L----72<br><br>Acest arbore va fi dezechilibrat prin rotatii random ale unor noduri alese tot aleatoriu<br>In cazul in care nodul ales nu are un vecin la stanga sau dreapta, rotatiile nu vor avea loc si se va alege alt nod<br><br></pre><br><pre id="26" onclick="afisare(26)"><br><br>Problem37<br>Primiti urmatoarele litere cu ponderi:<br>[('A', 21), ('B', 31), ('O', 18), ('R', 11), ('T', 19)]<br>a) Construiti arborele Huffman si afisati codarile literelor<br>b) Care poate fi codarea cuvantului "OBRAT"<br>111010000100<br>110100000100<br>011110000100<br>101111000100<br>c) Decodati daca se poate:<br>101100111010001<br>10011111000001<br>1111101100101100<br>d) Gasiti si alte cuvinte.<br><br></pre><br><pre id="27" onclick="afisare(27)"><br><br>Problem39<br>Construiti un hash folosind valorile:[48, 82, 61, 54, 22, 83]<br>a). liste simplu inlantuite: h(x) = x % 19<br>b). open adressing (linear probing): h(x, i) = (x + i) % 19<br>c).quadratic probing:h(x, i) = (x + 5*i^2 + 9*i + 1 ) % 19 <br>d).double hashing: h(x, i) = (x % 13 + i * (7-x % 7 )) % 7<br><br></pre><br><pre id="28" onclick="afisare(28)"><br><br>Problem40<br>Primiti urmatorul hash, carea a fost creat folosind adresarea directa - liniara:<br>1    2    3    4    5    6    7    8    9    10    11    12    <br>None   None   14   15   16   5   18   19   8   9   6   17   <br> • in ce ordine ar fi putut fi inserate elementele intr-un hash:<br>A)[18, 15, 8, 9, 16, 19, 14, 5, 6, 17]<br>B)[18, 15, 8, 9, 16, 14, 19, 5, 6, 17]<br>C)[18, 15, 8, 9, 16, 19, 14, 5, 6, 17]<br>D)[18, 6, 8, 9, 16, 19, 14, 5, 15, 17]<br>E)[18, 15, 8, 9, 16, 19, 17, 5, 6, 14]<br> • stergeti elementul 14 din hash.<br></pre><br><pre id="29" onclick="afisare(29)"><br><br>Problem41<br>Primind urmatorul graf, construiti arborele partial de cost minim folosind algoritmul lui Prim cu heap-uri.<br>0:[(1, 6), (3, 14), (4, 6), (5, 12)]<br>1:[(0, 6), (2, 11), (5, 11)]<br>2:[(1, 11), (3, 5), (5, 12)]<br>3:[(0, 14), (2, 5)]<br>4:[(0, 6)]<br>5:[(0, 12), (1, 11), (2, 12)]<br><img src="/static/solutii/Lab212/GrafProblem41Var4.png"><br></pre><br><pre id="30" onclick="afisare(30)"><br><br>Problem42<br>Primind urmatorul graf, construiti arborele partial de cost minim (Kruskal):<br><br>Lista de muchii:<br>0  1 -> 24<br>0  2 -> 20<br>0  3 -> 14<br>0  4 -> 24<br>0  7 -> 14<br>1  2 -> 25<br>1  3 -> 29<br>1  4 -> 5<br>1  5 -> 6<br>1  7 -> 16<br>2  3 -> 14<br>2  4 -> 23<br>3  6 -> 20<br>3  7 -> 10<br>4  6 -> 10<br>4  7 -> 3<br>5  7 -> 21<br>6  7 -> 19<br><img src="/static/solutii/Lab212/GrafProblem42Var4.png"><br></pre><br><pre id="31" onclick="afisare(31)"><br><br>Problem43<br>43 (DC) Primind urmatorul graf (neorientat):<br>Lista de muchii:<br>['B', 'C', 11]<br>['B', 'E', 14]<br>['C', 'D', 3]<br>Aplicati algoritmul lui Dijkstra (pe heap-uri) pornind din nodul A pentru a gasi distanta minimade la acesta catre oricare alt nod din graf.<br><br></pre>